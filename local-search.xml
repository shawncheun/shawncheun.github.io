<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Git Tutorial</title>
    <link href="/2022/04/08/2022-04-08-Git-Tutorial/"/>
    <url>/2022/04/08/2022-04-08-Git-Tutorial/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.tutorialspoint.com/git/index.htm">[1]</a></p><p><a href="https://www.atlassian.com/git/tutorials">[2]</a></p><h1 id="Git-Tutorial"><a href="#Git-Tutorial" class="headerlink" title="Git Tutorial"></a>Git Tutorial</h1><h2 id="Git-Basic-Concepts"><a href="#Git-Basic-Concepts" class="headerlink" title="Git - Basic Concepts"></a>Git - Basic Concepts</h2><p>Version Control System (VCS): </p><ul><li>Centralized,</li><li>Distributed&#x2F;Decentralized</li></ul><p>Advantages of Git</p><ul><li>Free and open source</li><li>Fast and small</li><li>Implicit backup</li><li>Security</li><li>No need of powerful hardware</li><li>Easier branching</li></ul><p>DVCS Terminologies</p><ul><li>Local Repository</li><li>Working Directory and Staging Area or Index</li></ul><p><strong>Basic workflow of Git</strong></p><p>Step 1 − You modify a file from the working directory.</p><p>Step 2 − You add these files to the staging area.</p><p>Step 3 − You perform commit operation that moves the files from the staging area. After push operation, it stores the changes permanently to the Git repository.</p><p><img src="https://www.tutorialspoint.com/git/images/staging_area.png"></p><ul><li>Blobs: Binary Large Object</li><li>Trees</li><li>Commits</li><li>Branches</li><li>Tags</li><li>Clone</li><li>Pull</li><li>Push</li><li>HEAD</li><li>Revision</li><li>URL: URL represents the location of the Git repository. Git URL is stored in config file.</li></ul><h2 id="Git-Environment-Setup"><a href="#Git-Environment-Setup" class="headerlink" title="Git - Environment Setup"></a>Git - Environment Setup</h2><p>Installation of Git Client</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp"><span class="hljs-meta"># For Debian/ Ubuntu</span><br>sudo apt install git-core<br>git --version<br><span class="hljs-meta"># For RPM based distros</span><br>[<span class="hljs-meta">CentOS ~</span>]$ su -<br>[<span class="hljs-meta">CentOS ~</span>]<span class="hljs-meta"># yum -y install git-core</span><br>[<span class="hljs-meta">CentOS ~</span>]<span class="hljs-meta"># git --version</span><br></code></pre></div></td></tr></table></figure><p>Customize Git Environment</p><p>Git provides the git config tool, which allows you to set configuration variables. Git stores all global configurations in <strong>.gitconfig</strong> file, which is located in your home directory.</p><p>Setting User Infomation</p><p>These information are used by Git for each commit.</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[jerry@CentOS project]</span>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;Jerry Mouse&quot;</span><span class="hljs-comment">// username</span><br><span class="hljs-selector-attr">[jerry@CentOS project]</span>$ git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;jerry@tutorialspoint.com&quot;</span><span class="hljs-comment">// email id</span><br></code></pre></div></td></tr></table></figure><p>Avoid merge commits for pulling</p><p>You pull the latest changes from a remote repository, and if these changes are divergent, then by default Git creates merge commits. We can avoid this via following settings.</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mipsasm">[<span class="hljs-keyword">jerry@CentOS </span>project]$ git <span class="hljs-built_in">config</span> --global <span class="hljs-keyword">branch.autosetuprebase </span>always<br></code></pre></div></td></tr></table></figure><p>Color highlighting,</p><p>enable color highlighting for Git in the console.</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-selector-attr">[jerry@CentOS project]</span>$ git config <span class="hljs-attr">--global</span> <span class="hljs-attribute">color</span><span class="hljs-selector-class">.ui</span> true<br><span class="hljs-selector-attr">[jerry@CentOS project]</span>$ git config <span class="hljs-attr">--global</span> <span class="hljs-attribute">color</span><span class="hljs-selector-class">.status</span> auto<br><span class="hljs-selector-attr">[jerry@CentOS project]</span>$ git config <span class="hljs-attr">--global</span> <span class="hljs-attribute">color</span><span class="hljs-selector-class">.branch</span> auto<br></code></pre></div></td></tr></table></figure><p>Setting default editor</p><p>By default, Git uses the system default editor. We can configure a different one by using git config.</p><figure class="highlight lua"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs lua">git <span class="hljs-built_in">config</span> <span class="hljs-comment">--global core.editor vim</span><br></code></pre></div></td></tr></table></figure><p>Setting default merge tool</p><p>Git does not provide a default merge tool for integrating conflicting changes into your working tree. We can set default merge tool by enabling following settings.</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[jerry@CentOS project]</span>$ git config <span class="hljs-attr">--global</span> merge<span class="hljs-selector-class">.tool</span> vimdiff<br></code></pre></div></td></tr></table></figure><p>Listing Git settings</p><p>To verify your Git settings of the local repository, use <strong>git config –list</strong> command as given below.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[jerry<span class="hljs-variable">@CentOS</span> project]<span class="hljs-variable">$ </span>git config --list<br></code></pre></div></td></tr></table></figure><p>The above command will produce the following result.</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-attr">user.name</span>=Jerry Mouse<br><span class="hljs-attr">user.email</span>=jerry@tutorialspoint.com<br><span class="hljs-attr">push.default</span>=nothing<br><span class="hljs-attr">branch.autosetuprebase</span>=always<br><span class="hljs-attr">color.ui</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">color.status</span>=auto<br><span class="hljs-attr">color.branch</span>=auto<br><span class="hljs-attr">core.editor</span>=vim<br><span class="hljs-attr">merge.tool</span>=vimdiff<br></code></pre></div></td></tr></table></figure><p><code>~/.gitconfig</code> contents:</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[user]</span><br><span class="hljs-attr">email</span> = shawncheunmail@gmail.com<br><span class="hljs-attr">name</span> = shawncheun<br><span class="hljs-section">[branch]</span><br><span class="hljs-attr">autosetuprebase</span> = always<br><span class="hljs-section">[color]</span><br><span class="hljs-attr">ui</span> = <span class="hljs-literal">true</span><br><span class="hljs-attr">status</span> = auto<br><span class="hljs-attr">brach</span> = auto<br><span class="hljs-section">[core]</span><br><span class="hljs-attr">editor</span> = na<span class="hljs-literal">no</span><br><span class="hljs-section">[merge]</span><br><span class="hljs-attr">tool</span> = vimdiff<br></code></pre></div></td></tr></table></figure><h2 id="Git-Life-Cycle"><a href="#Git-Life-Cycle" class="headerlink" title="Git - Life Cycle"></a>Git - Life Cycle</h2><p>General workflow is as follows:</p><ul><li><p>You <strong>clone</strong> the Git repository as a working copy.</p></li><li><p>You modify the working copy by adding&#x2F;editing files.</p></li><li><p>If necessary, you also update the working copy by taking other developer’s changes.</p></li><li><p>You review the changes before commit.</p></li><li><p>You commit changes. If everything is fine, then you push the changes to the repository.</p></li><li><p>After committing, if you realize something is wrong, then you correct the last commit and push the changes to the repository.</p></li></ul><p>Shown below is the pictorial representation of the work-flow.</p><p><img src="https://www.tutorialspoint.com/git/images/life_cycle.png"></p><h2 id="Git-Create-Operation"><a href="#Git-Create-Operation" class="headerlink" title="Git - Create Operation"></a>Git - Create Operation</h2><p>In this chapter, we will see how to create a remote Git repository; from now on, we will refer to it as Git Server. We need a Git server to allow team collaboration.</p><p>Create New User</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit"><span class="hljs-meta"># add new group</span><br>[root<span class="hljs-symbol">@CentOS</span> ~]<span class="hljs-meta"># groupadd devs</span><br><br><span class="hljs-meta"># add new user</span><br>[root<span class="hljs-symbol">@CentOS</span> ~]<span class="hljs-meta"># useradd -G devs -d /home/gituser -m -s /bin/bash gituser</span><br><br><span class="hljs-meta"># change password</span><br>[root<span class="hljs-symbol">@CentOS</span> ~]<span class="hljs-meta"># passwd gituser</span><br></code></pre></div></td></tr></table></figure><p>Create a Bare Repository</p><p>Let us initialize a new repository by using <strong>init</strong> command followed by <strong>–bare</strong> option. It initializes the repository without a working directory. By convention, the bare repository must be named as <strong>.git</strong>.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[gituser<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>pwd<br><span class="hljs-regexp">/home/gituser</span><br><br>[gituser<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>mkdir project.git<br>[gituser<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>cd project.git/<br>[gituser<span class="hljs-variable">@CentOS</span> project.git]<span class="hljs-variable">$ </span>ls<br><br>[gituser<span class="hljs-variable">@CentOS</span> project.git]<span class="hljs-variable">$ </span>git --bare init<br>Initialized empty Git repository in /home/gituser-m/project.git/<br><br>[gituser<span class="hljs-variable">@CentOS</span> project.git]<span class="hljs-variable">$ </span>ls<br>branches config description HEAD hooks info objects refs<br></code></pre></div></td></tr></table></figure><p>Generate Public&#x2F;Private RSA Key Pair<br>Let us walk through the process of configuring a Git server, ssh-keygen utility generates public&#x2F;private RSA key pair, that we will use for user authentication.</p><p><strong>Note:</strong> Never share your PRIVATE KEY with others.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">tom<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>pwd<br><span class="hljs-regexp">/home/tom</span><br><br>[tom<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>ssh-keygen/<span class="hljs-regexp">/ ~/</span>.ssh was created.<br></code></pre></div></td></tr></table></figure><p>Adding Keys to authorized_keys</p><p>Suppose there are two developers working on a project, namely Tom and Jerry. Both users have generated public keys. Let us see how to use these keys for authentication.</p><p>Tom added his public key to the server by using <strong>ssh-copy-id</strong> command as given below - </p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[tom<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>pwd<br><span class="hljs-regexp">/home/tom</span><br><br>[tom<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>ssh-copy-id -i ~<span class="hljs-regexp">/.ssh/id</span>_rsa.pub gituser<span class="hljs-variable">@git</span>.server.com<br></code></pre></div></td></tr></table></figure><p>Similarly, Jerry added his public key to the server by using ssh-copy-id command.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[jerry<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>pwd<br><span class="hljs-regexp">/home/jerry</span><br><br>[jerry<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>ssh-copy-id -i ~<span class="hljs-regexp">/.ssh/id</span>_rsa.pub gituser<span class="hljs-variable">@git</span>.server.com<br></code></pre></div></td></tr></table></figure><p>Push Changes to the Repository</p><p>We have created a bare repository on the server and allowed access for two users. From now on, Tom and Jerry can push their changes to the repository by adding it as a remote.</p><p>Git init command creates <strong>.git</strong> directory to store metadata about the repository every time it reads the configuration from the <strong>.git&#x2F;config</strong> file.</p><p>Tom creates a new directory, adds README file, and commits his change as initial commit. After commit, he verifies the commit message by running the <strong>git log</strong> command.</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby">[tom<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>pwd<br>/home/tom<br><br>[tom<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>mkdir tom_repo<br><br>[tom<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>cd tom_repo/<br><br>[tom<span class="hljs-variable">@CentOS</span> tom_repo]<span class="hljs-variable">$ </span>git init<br>Initialized empty Git repository <span class="hljs-keyword">in</span> /home/tom/tom_repo/.git/<br><br>[tom<span class="hljs-variable">@CentOS</span> tom_repo]<span class="hljs-variable">$ </span>echo <span class="hljs-string">&#x27;TODO: Add contents for README&#x27;</span> &gt; <span class="hljs-variable constant_">README</span><br><br>[tom<span class="hljs-variable">@CentOS</span> tom_repo]<span class="hljs-variable">$ </span>git status -s<br><span class="hljs-string">??</span> <span class="hljs-variable constant_">README</span><br><br>[tom<span class="hljs-variable">@CentOS</span> tom_repo]<span class="hljs-variable">$ </span>git add .<br><br>[tom<span class="hljs-variable">@CentOS</span> tom_repo]<span class="hljs-variable">$ </span>git status -s<br>A <span class="hljs-variable constant_">README</span><br><br>[tom<span class="hljs-variable">@CentOS</span> tom_repo]<span class="hljs-variable">$ </span>git commit -m <span class="hljs-string">&#x27;Initial commit&#x27;</span><br><br><span class="hljs-comment"># Output the following result</span><br>[master (root-commit) 19ae206] Initial commit<br><span class="hljs-number">1</span> files changed, <span class="hljs-number">1</span> insertions(+), <span class="hljs-number">0</span> deletions(-)<br>create mode <span class="hljs-number">100644</span> <span class="hljs-variable constant_">README</span><br></code></pre></div></td></tr></table></figure><p>Tom checks the log message by executing the git log command.</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">[tom<span class="hljs-variable">@CentOS</span> tom_repo]$ git log<br><br># Ouput the following <span class="hljs-keyword">result</span>:<br><span class="hljs-keyword">commit</span> <span class="hljs-number">19</span>ae20683fc460db7d127cf201a1429523b0e319<br>Author: Tom Cat <span class="hljs-operator">&lt;</span>tom<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">07</span>:<span class="hljs-number">32</span>:<span class="hljs-number">56</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br><span class="hljs-keyword">Initial</span> <span class="hljs-keyword">commit</span><br></code></pre></div></td></tr></table></figure><p>Tom committed his changes to the local repository. Now, it’s time to push the changes to the remote repository. But before that, we have to add the repository as a remote, this is a one-time operation. After this, he can safely push the changes to the remote repository.</p><p><strong>Note</strong> − By default, Git pushes only to matching branches: For every branch that exists on the local side, the remote side is updated if a branch with the same name already exists there. In our tutorials, every time we push changes to the <strong>origin master</strong> branch, use appropriate branch name according to your requirement.</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-selector-attr">[tom@CentOS tom_repo]</span>$ git remote add origin gituser<span class="hljs-keyword">@git</span>.server.<span class="hljs-attribute">com</span>:project.git<br>[tom<span class="hljs-keyword">@CentOS</span> tom_repo]$ git push origin master<br><br># Ouput the following <span class="hljs-attribute">result</span>:<br>Counting <span class="hljs-attribute">objects</span>: <span class="hljs-number">3</span>, done.<br>Writing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), <span class="hljs-number">242</span> bytes, done.<br>Total <span class="hljs-number">3</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>To gituser<span class="hljs-keyword">@git</span>.server.<span class="hljs-attribute">com</span>:project.git<br>* [new branch]<br>master −&gt; master<br></code></pre></div></td></tr></table></figure><p>Now, the changes are successfully committed to the remote repository.</p><h2 id="Git-Clone-Operation"><a href="#Git-Clone-Operation" class="headerlink" title="Git - Clone Operation"></a>Git - Clone Operation</h2><p>We have a bare repository on the Git server and Tom also pushed his first version. Now, Jerry can view his changes. The Clone operation creates an instance of the remote repository.</p><p>Jerry creates a new directory in his home directory and performs the clone operation.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[jerry<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>mkdir jerry_repo<br>[jerry<span class="hljs-variable">@CentOS</span> ~]<span class="hljs-variable">$ </span>cd jerry_repo/<br>[jerry<span class="hljs-variable">@CentOS</span> jerry_repo]<span class="hljs-variable">$ </span>git clone gituser<span class="hljs-variable">@git</span>.server.<span class="hljs-symbol">com:</span>project.git<br><br><span class="hljs-comment"># Produce the following result:</span><br><span class="hljs-symbol">remote:</span> Counting <span class="hljs-symbol">objects:</span> <span class="hljs-number">3</span>, done.<br>Receiving <span class="hljs-symbol">objects:</span> <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), <span class="hljs-number">241</span> bytes, done.<br><span class="hljs-symbol">remote:</span> Total <span class="hljs-number">3</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure><p>Jerry changes the directory to new local repository and lists its directory contents.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[jerry<span class="hljs-variable">@CentOS</span> jerry_repo]<span class="hljs-variable">$ </span>cd project/<br>[jerry<span class="hljs-variable">@CentOS</span> jerry_repo]<span class="hljs-variable">$ </span>ls<br>README<br></code></pre></div></td></tr></table></figure><h2 id="Git-Perform-Changes"><a href="#Git-Perform-Changes" class="headerlink" title="Git - Perform Changes"></a>Git - Perform Changes</h2><p>Jerry clones the repository and decides to implement basic string operations. So he creates string.c file. After adding the contents, string.c will look like as follows −</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">my_strlen</span><span class="hljs-params">(<span class="hljs-type">char</span> *s)</span><br>&#123;<br>   <span class="hljs-type">char</span> *p = s;<br>   <span class="hljs-keyword">while</span> (*p)<br>      ++p;<br>   <span class="hljs-keyword">return</span> (p - s);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">char</span> *s[] = <br>   &#123;<br>      <span class="hljs-string">&quot;Git tutorials&quot;</span>,<br>      <span class="hljs-string">&quot;Tutorials Point&quot;</span><br>   &#125;;<br><br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i)<br>      <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;string lenght of %s = %d\n&quot;</span>, s[i], my_strlen(s[i]));<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>He compiled and tested his code and everything is working fine. Now, he can safely add these changes to the repository.</p><p>Git add operation adds file to the staging area.</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bssh">[jerry@CentOS project]$ git status -s<br>?? string<br>?? string.c<br><br>[jerry@CentOS project]$ git add string.c<br></code></pre></div></td></tr></table></figure><p>Git is showing a question mark before file names. Obviously, these files are not a part of Git, and that is why Git does not know what to do with these files. That is why, Git is showing a question mark before file names.</p><p>Jerry has added the file to the stash area, git status command will show files present in the staging area.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ git status -s<br>A string.c<br>?? string<br></code></pre></div></td></tr></table></figure><p>To commit the changes, he used the git commit command followed by –m option. If we omit –m option. Git will open a text editor where we can write multiline commit message.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ git commit -m <span class="hljs-string">&#x27;Implemented my_strlen function&#x27;</span><br><br><span class="hljs-comment"># Output</span><br>[master cbe1249] Implemented my_strlen <span class="hljs-keyword">function</span><br>1 files changed, 24 insertions(+), 0 deletions(-)<br>create mode 100644 string.c<br></code></pre></div></td></tr></table></figure><p>After commit to view log details, he runs the git log command. It will display the information of all the commits with their commit ID, commit author, commit date and <strong>SHA-1</strong> hash of commit.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># Output</span><br>commit cbe1249b140dad24b2c35b15cc7e26a6f02d2277<br>Author: Jerry Mouse &lt;jerry@tutorialspoint.com&gt;<br>Date: Wed Sep 11 08:05:26 2013 +0530<br><br>Implemented my_strlen <span class="hljs-keyword">function</span><br><br>commit 19ae20683fc460db7d127cf201a1429523b0e319<br>Author: Tom Cat &lt;tom@tutorialspoint.com&gt;<br>Date: Wed Sep 11 07:32:56 2013 +0530<br><br>Initial commit<br></code></pre></div></td></tr></table></figure><h2 id="Git-Review-Changes"><a href="#Git-Review-Changes" class="headerlink" title="Git - Review Changes"></a>Git - Review Changes</h2><p>After viewing the commit details, Jerry realizes that the string length cannot be negative, that’s why he decides to change the return type of my_strlen function.</p><p>Jerry uses the <strong>git log</strong> command to view log details.</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">[jerry<span class="hljs-variable">@CentOS</span> project]$ git log<br><br># Output:<br><span class="hljs-keyword">commit</span> cbe1249b140dad24b2c35b15cc7e26a6f02d2277<br>Author: Jerry Mouse <span class="hljs-operator">&lt;</span>jerry<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">08</span>:<span class="hljs-number">05</span>:<span class="hljs-number">26</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br>Implemented my_strlen <span class="hljs-keyword">function</span><br></code></pre></div></td></tr></table></figure><p>Jerry uses the <strong>git show</strong> command to view the commit details. The git show command takes <strong>SHA-1</strong> commit ID as a parameter.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ git show cbe1249b140dad24b2c35b15cc7e26a6f02d2277<br><br><span class="hljs-comment"># Output:</span><br>commit cbe1249b140dad24b2c35b15cc7e26a6f02d2277<br>Author: Jerry Mouse &lt;jerry@tutorialspoint.com&gt;<br>Date: Wed Sep 11 08:05:26 2013 +0530<br><br>Implemented my_strlen <span class="hljs-keyword">function</span><br><br><br>diff --git a/string.c b/string.c<br>new file mode 100644<br>index 0000000..187afb9<br>--- /dev/null<br>+++ b/string.c<br>@@ -0,0 +1,24 @@<br>+<span class="hljs-comment">#include &lt;stdio.h&gt;</span><br>+<br>+int my_strlen(char *s)<br>+&#123;<br>   +<br>   char *p = s;<br>   +<br>   +<br>   <span class="hljs-keyword">while</span> (*p)<br>   + ++p;<br>   + <span class="hljs-built_in">return</span> (p -s );<br>   +<br>&#125;<br>+<br></code></pre></div></td></tr></table></figure><p>He changes the return type of the function from int to size_t. After testing the code, he reviews his changes by running the <strong>git diff</strong> command.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[jerry<span class="hljs-variable">@CentOS</span> project]<span class="hljs-variable">$ </span>git diff<br></code></pre></div></td></tr></table></figure><p>The above command will produce the following result −</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">diff --git a/string.c b/string.c<br>index 187afb9..7da2992 100644<br>--- a/string.c<br>+++ b/string.c<br>@@ -1,6 +1,6 @@<br><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br>-int my_strlen(char *s)<br>+size_t my_strlen(char *s)<br>&#123;<br>   char *p = s;<br>   @@ -18,7 +18,7 @@ int main(void)<br>&#125;;<br><span class="hljs-keyword">for</span> (i = 0; i &lt; 2; ++i)<br>&#123;<br>   - <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;string lenght of %s = %d\n&quot;</span>, s[i], my_strlen(s[i]));<br>   + <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;string lenght of %s = %lu\n&quot;</span>, s[i], my_strlen(s[i]));<br>   <span class="hljs-built_in">return</span> 0;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Git diff shows <strong>‘+’</strong> sign before lines, which are newly added and <strong>‘−’</strong> for deleted lines.</p><h2 id="Git-Commit-Changes"><a href="#Git-Commit-Changes" class="headerlink" title="Git - Commit Changes"></a>Git - Commit Changes</h2><p>Jerry has already committed the changes and he wants to correct his last commit. In this case, <strong>git amend</strong> operation will help. The amend operation changes the last commit including your commit message; it creates a new commit ID.</p><p>Before amend operation, he checks the commit log.</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">[jerry<span class="hljs-variable">@CentOS</span> project]$ git log<br><br># Output<br><span class="hljs-keyword">commit</span> cbe1249b140dad24b2c35b15cc7e26a6f02d2277<br>Author: Jerry Mouse <span class="hljs-operator">&lt;</span>jerry<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">08</span>:<span class="hljs-number">05</span>:<span class="hljs-number">26</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br>Implemented my_strlen <span class="hljs-keyword">function</span><br><br><span class="hljs-keyword">commit</span> <span class="hljs-number">19</span>ae20683fc460db7d127cf201a1429523b0e319<br>Author: Tom Cat <span class="hljs-operator">&lt;</span>tom<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">07</span>:<span class="hljs-number">32</span>:<span class="hljs-number">56</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br><span class="hljs-keyword">Initial</span> <span class="hljs-keyword">commit</span><br></code></pre></div></td></tr></table></figure><p>Jerry commits the new changes with – amend operation and views the commit log.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ git status -s<br>M string.c<br>?? string<br><br>[jerry@CentOS project]$ git add string.c<br><br>[jerry@CentOS project]$ git status -s<br>M string.c<br>?? string<br><br>[jerry@CentOS project]$ git commit --amend -m <span class="hljs-string">&#x27;Changed return type of my_strlen to size_t&#x27;</span><br>[master d1e19d3] Changed <span class="hljs-built_in">return</span> <span class="hljs-built_in">type</span> of my_strlen to size_t<br>1 files changed, 24 insertions(+), 0 deletions(-)<br>create mode 100644 string.c<br></code></pre></div></td></tr></table></figure><p>Now, git log will show new commit message with new commit ID −</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-comment"># Output</span><br>commit d1e19d316224cddc437e3ed34ec3c931ad803958<br>Author: Jerry Mouse &lt;jerry@tutorialspoint.com&gt;<br>Date: Wed Sep 11 08:05:26 2013 +0530<br><br>Changed <span class="hljs-built_in">return</span> <span class="hljs-built_in">type</span> of my_strlen to size_t<br><br>commit 19ae20683fc460db7d127cf201a1429523b0e319<br>Author: Tom Cat &lt;tom@tutorialspoint.com&gt;<br>Date: Wed Sep 11 07:32:56 2013 +0530<br><br>Initial commit<br></code></pre></div></td></tr></table></figure><h2 id="Git-Push-Operation"><a href="#Git-Push-Operation" class="headerlink" title="Git - Push Operation"></a>Git - Push Operation</h2><p>Jerry modified his last commit by using the amend operation and he is ready to push the changes. The Push operation stores data permanently to the Git repository. After a successful push operation, other developers can see Jerry’s changes.</p><p>Before push operation, he executes the <code>git log</code>  to view the commit, and <code>git show</code> command to review his changes.</p><p>Jerry is happy with his changes and he is ready to push his changes.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ git push origin master<br><br><span class="hljs-comment"># Output</span><br>he above <span class="hljs-built_in">command</span> will produce the following result:<br><br>Counting objects: 4, <span class="hljs-keyword">done</span>.<br>Compressing objects: 100% (3/3), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (3/3), 517 bytes, <span class="hljs-keyword">done</span>.<br>Total 3 (delta 0), reused 0 (delta 0)<br>To gituser@git.server.com:project.git<br>19ae206..d1e19d3 master −&gt; master<br></code></pre></div></td></tr></table></figure><p>Jerry’s changes have been successfully pushed to the repository; now other developers can view his changes by performing clone or update operation.</p><h2 id="Git-Update-Operation"><a href="#Git-Update-Operation" class="headerlink" title="Git - Update Operation"></a>Git - Update Operation</h2><h3 id="Modify-Existing-Function"><a href="#Modify-Existing-Function" class="headerlink" title="Modify Existing Function"></a>Modify Existing Function</h3><p>Tom performs the clone operation and finds a new file string.c. He wants to know who added this file to the repository and for what purpose, so, he executes the <strong>git log</strong> command.</p><figure class="highlight scss"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs scss"><span class="hljs-selector-attr">[tom@CentOS ~]</span>$ git clone gituser<span class="hljs-keyword">@git</span>.server.<span class="hljs-attribute">com</span>:project.git<br><br># Output<br>Initialized empty Git repository in /home/tom/project/.git/<br><span class="hljs-attribute">remote</span>: Counting <span class="hljs-attribute">objects</span>: <span class="hljs-number">6</span>, done.<br><span class="hljs-attribute">remote</span>: Compressing <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">4</span>/<span class="hljs-number">4</span>), done.<br>Receiving <span class="hljs-attribute">objects</span>: <span class="hljs-number">100%</span> (<span class="hljs-number">6</span>/<span class="hljs-number">6</span>), <span class="hljs-number">726</span> bytes, done.<br><span class="hljs-attribute">remote</span>: Total <span class="hljs-number">6</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br></code></pre></div></td></tr></table></figure><p>The Clone operation will create a new directory inside the current working directory. He changes the directory to newly created directory and executes the <strong>git log</strong> command.</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">[tom<span class="hljs-variable">@CentOS</span> <span class="hljs-operator">~</span>]$ cd project<span class="hljs-operator">/</span><br>[tom<span class="hljs-variable">@CentOS</span> project]$ git log<br><br># Output<br><span class="hljs-keyword">commit</span> d1e19d316224cddc437e3ed34ec3c931ad803958<br>Author: Jerry Mouse <span class="hljs-operator">&lt;</span>jerry<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">08</span>:<span class="hljs-number">05</span>:<span class="hljs-number">26</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br>Changed <span class="hljs-keyword">return</span> type <span class="hljs-keyword">of</span> my_strlen <span class="hljs-keyword">to</span> size_t<br><br><span class="hljs-keyword">commit</span> <span class="hljs-number">19</span>ae20683fc460db7d127cf201a1429523b0e319<br>Author: Tom Cat <span class="hljs-operator">&lt;</span>tom<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">07</span>:<span class="hljs-number">32</span>:<span class="hljs-number">56</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br><span class="hljs-keyword">Initial</span> <span class="hljs-keyword">commit</span><br></code></pre></div></td></tr></table></figure><p>After observing the log, he realizes that the file string.c was added by Jerry to implement basic string operations. He is curious about Jerry’s code. So he opens string.c in text editor and immediately finds a bug. In my_strlen function, Jerry is not using a constant pointer. So, he decides to modify Jerry’s code. After modification, the code looks as follows −</p><figure class="highlight diff"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs diff">[tom@CentOS project]$ git diff<br><br># Output<br><span class="hljs-comment">diff --git a/string.c b/string.c</span><br><span class="hljs-comment">index 7da2992..32489eb 100644</span><br><span class="hljs-comment">--- a/string.c</span><br><span class="hljs-comment">+++ b/string.c</span><br><span class="hljs-meta">@@ -1,8 +1,8 @@</span><br>#include &lt;stdio.h&gt;<br><span class="hljs-deletion">-size_t my_strlen(char *s)</span><br><span class="hljs-addition">+size_t my_strlen(const char *s)</span><br>&#123;<br>   - char *p = s;<br>   + const char *p = s;<br>   while (*p)<br>   ++p;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>After testing, he commits his change.</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">[tom<span class="hljs-variable">@CentOS</span> project]$ git status <span class="hljs-operator">-</span>s<br>M string.c<br>?? string<br><br>[tom<span class="hljs-variable">@CentOS</span> project]$ git <span class="hljs-keyword">add</span> string.c<br><br>[tom<span class="hljs-variable">@CentOS</span> project]$ git <span class="hljs-keyword">commit</span> <span class="hljs-operator">-</span>m <span class="hljs-string">&#x27;Changed char pointer to const char pointer&#x27;</span><br>[master cea2c00] Changed <span class="hljs-type">char</span> pointer <span class="hljs-keyword">to</span> const <span class="hljs-type">char</span> pointer<br><span class="hljs-number">1</span> files changed, <span class="hljs-number">2</span> insertions(<span class="hljs-operator">+</span>), <span class="hljs-number">2</span> deletions(<span class="hljs-operator">-</span>)<br><br>[tom<span class="hljs-variable">@CentOS</span> project]$ git log<br><br>#Output<br><span class="hljs-keyword">commit</span> cea2c000f53ba99508c5959e3e12fff493b<br>Author: Tom Cat <span class="hljs-operator">&lt;</span>tom<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">08</span>:<span class="hljs-number">32</span>:<span class="hljs-number">07</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br>Changed <span class="hljs-type">char</span> pointer <span class="hljs-keyword">to</span> const <span class="hljs-type">char</span> pointer<br><br><br><span class="hljs-keyword">commit</span> d1e19d316224cddc437e3ed34ec3c931ad803958<br>Author: Jerry Mouse <span class="hljs-operator">&lt;</span>jerry<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">08</span>:<span class="hljs-number">05</span>:<span class="hljs-number">26</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br>Changed <span class="hljs-keyword">return</span> type <span class="hljs-keyword">of</span> my_strlen <span class="hljs-keyword">to</span> size_t<br><br><br><span class="hljs-keyword">commit</span> <span class="hljs-number">19</span>ae20683fc460db7d127cf201a1429523b0e319<br>Author: Tom Cat <span class="hljs-operator">&lt;</span>tom<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">07</span>:<span class="hljs-number">32</span>:<span class="hljs-number">56</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><span class="hljs-keyword">Initial</span> <span class="hljs-keyword">commit</span><br></code></pre></div></td></tr></table></figure><p>Tom uses git push command to push his changes.</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">[tom@CentOS project]$ git push origin <span class="hljs-keyword">master</span><br><br><span class="hljs-title"># Output</span><br>Counting objects: <span class="hljs-number">5</span>, done.<br>Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), done.<br>Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), <span class="hljs-number">336</span> bytes, done.<br>Total <span class="hljs-number">3</span> (delta <span class="hljs-number">1</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>To gituser@git.server.com:project.git<br>d1e19d3..cea2c00 <span class="hljs-keyword">master</span> <span class="hljs-title">−&gt; master</span><br></code></pre></div></td></tr></table></figure><h3 id="Add-New-Function"><a href="#Add-New-Function" class="headerlink" title="Add New Function"></a>Add New Function</h3><p>Meanwhile, Jerry decides to implement <strong>string compare</strong> functionality. So he modifies string.c, the file looks as follows −</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">my_strlen</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">char</span> *p = s;<br>   <span class="hljs-keyword">while</span> (*p)<br>      ++p;<br>   <span class="hljs-keyword">return</span> (p - s);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">char</span> *<span class="hljs-title">my_strcpy</span><span class="hljs-params">(<span class="hljs-type">char</span> *t, <span class="hljs-type">char</span> *s)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">char</span> *p = t;<br>   <br>   <span class="hljs-keyword">while</span> (*t++ = *s++)<br>   ;<br>   <br>   <span class="hljs-keyword">return</span> p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-type">int</span> i;<br>   <br>   <span class="hljs-type">char</span> p[<span class="hljs-number">32</span>];<br>   <span class="hljs-type">char</span> *s[] = <br>   &#123;<br>      <span class="hljs-string">&quot;Git tutorials&quot;</span>,<br>      <span class="hljs-string">&quot;Tutorials Point&quot;</span><br>   &#125;;<br><br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; ++i)      <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;string lenght of %s = %d\n&quot;</span>, s[i], <span class="hljs-built_in">my_strlen</span>(s[i]));<br>   <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, <span class="hljs-built_in">my_strcp</span>(p1, <span class="hljs-string">&quot;Hello, World!!!&quot;</span>));<br>   <br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>After modification, he performed:</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[jerry<span class="hljs-variable">@CentOS</span> project]<span class="hljs-variable">$ </span>git diff<br><br><span class="hljs-comment"># Output</span><br></code></pre></div></td></tr></table></figure><p>After testing, he is ready to push his change.</p><figure class="highlight csharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs csharp">[<span class="hljs-meta">jerry@CentOS project</span>]$ git status -s<br>M <span class="hljs-built_in">string</span>.c<br>?? <span class="hljs-built_in">string</span><br><br>[<span class="hljs-meta">jerry@CentOS project</span>]$ git <span class="hljs-keyword">add</span> <span class="hljs-built_in">string</span>.c<br><br>[<span class="hljs-meta">jerry@CentOS project</span>]$ git commit -m <span class="hljs-string">&quot;Added my_strcpy function&quot;</span><br>[<span class="hljs-meta">master e944e5a</span>] Added my_strcpy function<br><span class="hljs-number">1</span> files changed, <span class="hljs-number">13</span> insertions(+), <span class="hljs-number">0</span> deletions(-)<br></code></pre></div></td></tr></table></figure><p>Before push operation, he verifies commit by viewing log messages.</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">[jerry<span class="hljs-variable">@CentOS</span> project]$ git log<br><br># Output<br><span class="hljs-keyword">commit</span> e944e5aab74b26e7447d3281b225309e4e59efcd<br>Author: Jerry Mouse <span class="hljs-operator">&lt;</span>jerry<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">08</span>:<span class="hljs-number">41</span>:<span class="hljs-number">42</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br>Added my_strcpy <span class="hljs-keyword">function</span><br><br><span class="hljs-keyword">commit</span> d1e19d316224cddc437e3ed34ec3c931ad803958<br>Author: Jerry Mouse <span class="hljs-operator">&lt;</span>jerry<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">08</span>:<span class="hljs-number">05</span>:<span class="hljs-number">26</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br>Changed <span class="hljs-keyword">return</span> type <span class="hljs-keyword">of</span> my_strlen <span class="hljs-keyword">to</span> size_t<br><br><span class="hljs-keyword">commit</span> <span class="hljs-number">19</span>ae20683fc460db7d127cf201a1429523b0e319<br>Author: Tom Cat <span class="hljs-operator">&lt;</span>tom<span class="hljs-variable">@tutorialspoint</span>.com<span class="hljs-operator">&gt;</span><br><span class="hljs-type">Date</span>: Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">07</span>:<span class="hljs-number">32</span>:<span class="hljs-number">56</span> <span class="hljs-number">2013</span> <span class="hljs-operator">+</span><span class="hljs-number">0530</span><br><br><span class="hljs-keyword">Initial</span> <span class="hljs-keyword">commit</span><br></code></pre></div></td></tr></table></figure><p>Jerry is happy with the changes and he wants to push his changes.</p><figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql">[jerry@CentOS project]$ git push origin master<br><br># <span class="hljs-keyword">If</span> Output,<br><span class="hljs-keyword">To</span> gituser@git.<span class="hljs-keyword">server</span>.com:project.git<br>! [rejected]<br>master −&gt; master (non-fast-forward)<br>error: failed <span class="hljs-keyword">to</span> push <span class="hljs-keyword">some</span> refs <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;gituser@git.server.com:project.git&#x27;</span><br><span class="hljs-keyword">To</span> prevent you <span class="hljs-keyword">from</span> losing history, non-fast-forward updates were rejected<br>Merge the remote changes <span class="hljs-keyword">before</span> pushing again. See the <span class="hljs-string">&#x27;Note about</span><br><span class="hljs-string">fast-forwards&#x27;</span> section <span class="hljs-keyword">of</span> <span class="hljs-string">&#x27;git push --help&#x27;</span> <span class="hljs-keyword">for</span> details.<br></code></pre></div></td></tr></table></figure><p>But Git is not allowing Jerry to push his changes. Because Git identified that remote repository and Jerry’s local repository are not in sync. Because of this, he can lose the history of the project. To avoid this mess, <u>Git failed this operation. Now, Jerry has to first update the local repository and only thereafter, he can push his own changes</u>.</p><h3 id="Fetch-Latest-Changes"><a href="#Fetch-Latest-Changes" class="headerlink" title="Fetch Latest Changes"></a>Fetch Latest Changes</h3><p>Jerry executes the git pull command to synchronize his local repository with the remote one.</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vbnet">[jerry@CentOS project]$ git pull<br><br># Output<br><span class="hljs-symbol">remote:</span> Counting objects: <span class="hljs-number">5</span>, done.<br><span class="hljs-symbol">remote:</span> Compressing objects: <span class="hljs-number">100%</span> (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), done.<br><span class="hljs-symbol">remote:</span> Total <span class="hljs-number">3</span> (delta <span class="hljs-number">1</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>Unpacking objects: <span class="hljs-number">100%</span> (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), done.<br><span class="hljs-keyword">From</span> git.server.com:project<br>d1e19d3..cea2c00 master −&gt; origin/master<br>First, rewinding head <span class="hljs-keyword">to</span> replay your work <span class="hljs-keyword">on</span> top <span class="hljs-keyword">of</span> it...<br><span class="hljs-symbol">Applying:</span> Added my_strcpy <span class="hljs-keyword">function</span><br></code></pre></div></td></tr></table></figure><p>After pull operation, Jerry checks the log messages and finds the details of Tom’s commit with commit ID.</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs autoit">[jerry<span class="hljs-symbol">@CentOS</span> project]$ git <span class="hljs-built_in">log</span><br><br><span class="hljs-meta"># Output</span><br></code></pre></div></td></tr></table></figure><p>Now, Jerry’s local repository is fully synchronized with the remote repository. So he can safely push his changes.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[jerry<span class="hljs-variable">@CentOS</span> project]<span class="hljs-variable">$ </span>git push origin master<br></code></pre></div></td></tr></table></figure><h2 id="Git-Stash-Operation"><a href="#Git-Stash-Operation" class="headerlink" title="Git - Stash Operation"></a>Git - Stash Operation</h2><p>Suppose you are implementing a new feature for your product. Your code is in progress and suddenly a customer escalation comes. Because of this, you have to keep aside your new feature work for a few hours. You cannot commit your partial code and also cannot throw away your changes. So you need some temporary space, where you can store your partial changes and later on commit it.</p><p>In Git, the stash operation takes your modified tracked files, stages changes, and saves them on a stack of unfinished changes that you can reapply at any time.</p><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-string">[jerry@CentOS project]</span>$ git status -s<br>M <span class="hljs-built_in">string</span>.c<br>?? <span class="hljs-built_in">string</span><br></code></pre></div></td></tr></table></figure><p>Now, you want to switch branches for customer escalation, but you don’t want to commit what you’ve been working on yet; so you’ll stash the changes. To push a new stash onto your stack, run the <strong>git stash</strong> command.</p><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">[jerry@CentOS project]$ git stash<br>Saved working directory <span class="hljs-keyword">and</span> index state WIP on master: e86f062 Added my_strcpy <span class="hljs-keyword">function</span><br><span class="hljs-title">HEAD</span> <span class="hljs-keyword">is</span> now <span class="hljs-keyword">at</span> e86f062 Added my_strcpy <span class="hljs-keyword">function</span><br></code></pre></div></td></tr></table></figure><p>Now, your working directory is clean and all the changes are saved on a stack. Let us verify it with the <strong>git status</strong> command.</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby">[jerry<span class="hljs-variable">@CentOS</span> project]<span class="hljs-variable">$ </span>git status -s<br><span class="hljs-string">??</span> string<br></code></pre></div></td></tr></table></figure><p>Now you can safely switch the branch and work elsewhere. We can view a list of stashed changes by using the <strong>git stash list</strong> command.</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmake">[jerry@CentOS <span class="hljs-keyword">project</span>]$ git stash <span class="hljs-keyword">list</span><br>stash@&#123;<span class="hljs-number">0</span>&#125;: WIP <span class="hljs-keyword">on</span> master: e86f062 Added my_strcpy <span class="hljs-keyword">function</span><br></code></pre></div></td></tr></table></figure><p>Suppose you have resolved the customer escalation and you are back on your new feature looking for your half-done code, just execute the <strong>git stash pop</strong> command, to remove the changes from the stack and place them in the current working directory.</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ruby">[jerry<span class="hljs-variable">@CentOS</span> project]<span class="hljs-variable">$ </span>git status -s<br><span class="hljs-string">??</span> string<br><br>[jerry<span class="hljs-variable">@CentOS</span> project]<span class="hljs-variable">$ </span>git stash pop<br></code></pre></div></td></tr></table></figure><p>The above command will produce the following result:</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs vim"># On branch master<br># Changed but not updated:<br># (use <span class="hljs-string">&quot;git add ...&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">update</span> what will <span class="hljs-keyword">be</span> committed)<br># (use <span class="hljs-string">&quot;git checkout -- ...&quot;</span> <span class="hljs-keyword">to</span> discard <span class="hljs-keyword">changes</span> in working directory)<br>modified: <span class="hljs-built_in">string</span>.<span class="hljs-keyword">c</span><br><br># Untracked <span class="hljs-keyword">files</span>:<br># (use <span class="hljs-string">&quot;git add ...&quot;</span> <span class="hljs-keyword">to</span> include in what will <span class="hljs-keyword">be</span> committed)<br><br><span class="hljs-built_in">string</span><br><span class="hljs-keyword">no</span> <span class="hljs-keyword">changes</span> added <span class="hljs-keyword">to</span> commit (use <span class="hljs-string">&quot;git add&quot;</span> <span class="hljs-built_in">and</span>/<span class="hljs-built_in">or</span> <span class="hljs-string">&quot;git commit -a&quot;</span>)<br>Dropped refs/stash@&#123;<span class="hljs-number">0</span>&#125; (<span class="hljs-number">36</span>f79dfedae4ac20e2e8558830154bd6315e72d4)<br></code></pre></div></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript"><span class="hljs-string">[jerry@CentOS project]</span>$ git status -s<br>M <span class="hljs-built_in">string</span>.c<br>?? <span class="hljs-built_in">string</span><br></code></pre></div></td></tr></table></figure><h2 id="Git-Move-Operation"><a href="#Git-Move-Operation" class="headerlink" title="Git - Move Operation"></a>Git - Move Operation</h2><p>As the name suggests, the move operation moves a directory or a file from one location to another. Tom decides to move the source code into <strong>src</strong> directory. The modified directory structure will appear as follows −</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mel">[tom@CentOS project]$ <span class="hljs-keyword">pwd</span><br>/home/tom/project<br><br>[tom@CentOS project]$ <span class="hljs-keyword">ls</span><br>README <span class="hljs-keyword">string</span> <span class="hljs-keyword">string</span>.c<br><br>[tom@CentOS project]$ mkdir src<br><br>[tom@CentOS project]$ git mv <span class="hljs-keyword">string</span>.c src/<br><br>[tom@CentOS project]$ git status -s<br>R <span class="hljs-keyword">string</span>.c −&gt; src/<span class="hljs-keyword">string</span>.c<br>?? <span class="hljs-keyword">string</span><br></code></pre></div></td></tr></table></figure><p>To make these changes permanent, we have to push the modified directory structure to the remote repository so that other developers can see this.</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">[tom@CentOS project]$ git commit -m <span class="hljs-string">&quot;Modified directory structure&quot;</span><br><br>[<span class="hljs-keyword">master</span> <span class="hljs-title">7d9ea97</span>] Modified directory structure<br><span class="hljs-number">1</span> files changed, <span class="hljs-number">0</span> insertions(+), <span class="hljs-number">0</span> deletions(-)<br>rename <span class="hljs-keyword">string</span>.c =&gt; src/<span class="hljs-keyword">string</span>.c (<span class="hljs-number">100</span>%)<br><br>[tom@CentOS project]$ git push origin <span class="hljs-keyword">master</span><br><span class="hljs-title">Counting</span> objects: <span class="hljs-number">4</span>, done.<br>Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>), done.<br>Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), <span class="hljs-number">320</span> bytes, done.<br>Total <span class="hljs-number">3</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>To gituser@git.server.com:project.git<br>e86f062..<span class="hljs-number">7</span>d9ea97 <span class="hljs-keyword">master</span> <span class="hljs-title">−&gt; master</span><br></code></pre></div></td></tr></table></figure><p>In Jerry’s local repository, before the pull operation, it will show the old directory structure.</p><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gradle">[jerry@CentOS <span class="hljs-keyword">project</span>]$ pwd<br><span class="hljs-regexp">/home/</span>jerry<span class="hljs-regexp">/jerry_repo/</span><span class="hljs-keyword">project</span><br><br>[jerry@CentOS <span class="hljs-keyword">project</span>]$ ls<br>README string string.c<br></code></pre></div></td></tr></table></figure><p>But after the pull operation, the directory structure will get updated. Now, Jerry can see the <strong>src</strong> directory and the file present inside that directory.</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">[jerry@CentOS project]$ git pull<br>remote: Counting objects: <span class="hljs-number">4</span>, done.<br>remote: Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">2</span>/<span class="hljs-number">2</span>), done.<br>remote: Total <span class="hljs-number">3</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>Unpacking objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), done.<br>From git.server.com:project<br>e86f062..<span class="hljs-number">7</span>d9ea97 <span class="hljs-keyword">master</span> <span class="hljs-title">−&gt; origin</span>/<span class="hljs-keyword">master</span><br><span class="hljs-title">First</span>, rewinding head to replay your work on top of it...<br>Fast-forwarded <span class="hljs-keyword">master</span> <span class="hljs-title">to</span> <span class="hljs-number">7</span>d9ea97683da90bcdb87c28ec9b4f64160673c8a.<br><br>[jerry@CentOS project]$ ls<br>README src <span class="hljs-keyword">string</span><br><br>[jerry@CentOS project]$ ls src/<br><span class="hljs-keyword">string</span>.c<br></code></pre></div></td></tr></table></figure><h2 id="Git-Rename-Operation"><a href="#Git-Rename-Operation" class="headerlink" title="Git - Rename Operation"></a>Git - Rename Operation</h2><p>Till now, both Tom and Jerry were using manual commands to compile their project. Now, Jerry decides to create Makefile for their project and also give a proper name to the file “string.c”.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[jerry@CentOS project]$ <span class="hljs-built_in">pwd</span><br>/home/jerry/jerry_repo/project<br><br>[jerry@CentOS project]$ <span class="hljs-built_in">ls</span><br>README src<br><br>[jerry@CentOS project]$ <span class="hljs-built_in">cd</span> src/<br>[jerry@CentOS project]$ <span class="hljs-built_in">touch</span> makefile<br>[jerry@CentOS src]$ git add Makefile<br>[jerry@CentOS src]$ git <span class="hljs-built_in">mv</span> string.c string_operations.c<br><br>[jerry@CentOS src]$ git status -s<br>A Makefile<br>R string.c −&gt; string_operations.c<br></code></pre></div></td></tr></table></figure><p>Git is showing <strong>R</strong> before file name to indicate that the file has been renamed.</p><p>For commit operation, Jerry used <code>-a</code> flag, that makes git commit automatically detect the modified files.</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs llvm">[jerry<span class="hljs-title">@CentOS</span> src]$ git commit -a -m &#x27;Added Makefile <span class="hljs-keyword">and</span> renamed strings.<span class="hljs-keyword">c</span> <span class="hljs-keyword">to</span><br>string_operations.<span class="hljs-keyword">c</span> &#x27;<br><br>[master <span class="hljs-number">94</span>f<span class="hljs-number">7</span>b<span class="hljs-number">26</span>] Added Makefile <span class="hljs-keyword">and</span> renamed strings.<span class="hljs-keyword">c</span> <span class="hljs-keyword">to</span> string_operations.<span class="hljs-keyword">c</span><br><span class="hljs-number">1</span> files changed<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span> insertions(+)<span class="hljs-punctuation">,</span> <span class="hljs-number">0</span> deletions(-)<br>create mode <span class="hljs-number">100644</span> src/Makefile<br>rename src/&#123;string.<span class="hljs-keyword">c</span> <span class="hljs-operator">=</span>&gt; string_operations.<span class="hljs-keyword">c</span>&#125; (<span class="hljs-number">100</span>%)<br></code></pre></div></td></tr></table></figure><p>After commit, he pushes his changes to the repository.</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">[jerry@CentOS src]$ git push origin <span class="hljs-keyword">master</span><br><br><span class="hljs-title"># Output</span><br>Counting objects: <span class="hljs-number">6</span>, done.<br>Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), done.<br>Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">4</span>/<span class="hljs-number">4</span>), <span class="hljs-number">396</span> bytes, done.<br>Total <span class="hljs-number">4</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>To gituser@git.server.com:project.git<br><span class="hljs-number">7</span>d9ea97..<span class="hljs-number">94</span>f7b26 <span class="hljs-keyword">master</span> <span class="hljs-title">−&gt; master</span><br></code></pre></div></td></tr></table></figure><p>Now, other developers can view these modifications by updating their local repository.</p><h2 id="Git-Delete-Operation"><a href="#Git-Delete-Operation" class="headerlink" title="Git - Delete Operation"></a>Git - Delete Operation</h2><p>Tom updates his local repository and finds the compiled binary in the <strong>src</strong> directory. After viewing the commit message, he realizes that the compiled binary was added by Jerry.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>pwd<br><span class="hljs-regexp">/home/tom</span><span class="hljs-regexp">/project/src</span><br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>ls<br>Makefile string_operations string_operations.c<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>file string_operations<br><span class="hljs-symbol">string_operations:</span> ELF <span class="hljs-number">64</span>-bit LSB executable, x86-<span class="hljs-number">64</span>, version <span class="hljs-number">1</span> (SYSV), dynamically linked (uses<br>shared libs), <span class="hljs-keyword">for</span> GNU/Linux <span class="hljs-number">2.6</span>.<span class="hljs-number">18</span>, not stripped<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git log<br>commit <span class="hljs-number">29</span>af9d45947dc044e33d69b9141d8d2dad37cc62<br><span class="hljs-symbol">Author:</span> Jerry Mouse &lt;jerry<span class="hljs-variable">@tutorialspoint</span>.com&gt;<br><span class="hljs-symbol">Date:</span> Wed Sep <span class="hljs-number">11</span> <span class="hljs-number">10</span>:<span class="hljs-number">16</span>:<span class="hljs-number">25</span> <span class="hljs-number">2013</span> +<span class="hljs-number">0</span>530<br><br>Added compiled binary<br></code></pre></div></td></tr></table></figure><p>VCS is used to store the source code only and not executable binaries. So, Tom decides to remove this file from the repository. For further operation, he uses the <strong>git rm</strong> command.</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs stylus"><span class="hljs-selector-attr">[tom@CentOS src]</span>$ ls<br>Makefile string_operations string_operations<span class="hljs-selector-class">.c</span><br><br><span class="hljs-selector-attr">[tom@CentOS src]</span>$ git rm string_operations<br>rm <span class="hljs-string">&#x27;src/string_operations&#x27;</span><br><br><span class="hljs-selector-attr">[tom@CentOS src]</span>$ git commit -<span class="hljs-selector-tag">a</span> -m <span class="hljs-string">&quot;Removed executable binary&quot;</span><br><br><span class="hljs-selector-attr">[master 5776472]</span> Removed executable binary<br><span class="hljs-number">1</span> files changed, <span class="hljs-number">0</span> <span class="hljs-built_in">insertions</span>(+), <span class="hljs-number">0</span> <span class="hljs-built_in">deletions</span>(-)<br>delete mode <span class="hljs-number">100755</span> <span class="hljs-attribute">src</span>/string_operations<br></code></pre></div></td></tr></table></figure><p>After commit, he pushes his changes to the repository.</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crmsh">[tom@CentOS src]$ git push origin <span class="hljs-keyword">master</span><br><br><span class="hljs-title"># Output</span><br>Counting objects: <span class="hljs-number">5</span>, done.<br>Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), done.<br>Writing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">3</span>/<span class="hljs-number">3</span>), <span class="hljs-number">310</span> bytes, done.<br>Total <span class="hljs-number">3</span> (delta <span class="hljs-number">1</span>), reused <span class="hljs-number">0</span> (delta <span class="hljs-number">0</span>)<br>To gituser@git.server.com:project.git<br><span class="hljs-number">29</span>af9d4..<span class="hljs-number">5776472</span> <span class="hljs-keyword">master</span> <span class="hljs-title">−&gt; master</span><br></code></pre></div></td></tr></table></figure><h2 id="Git-Fix-Mistakes"><a href="#Git-Fix-Mistakes" class="headerlink" title="Git - Fix Mistakes"></a>Git - Fix Mistakes</h2><p>To err is human. So every VCS provides a feature to fix mistakes until a certain point. Git provides a feature that we can use to undo the modifications that have been made to the local repository.</p><p>Suppose the user accidentally does some changes to his local repository and then wants to undo these changes. In such cases, the <strong>revert</strong> operation plays an important role.</p><h3 id="Revert-Uncommitted-Changes"><a href="#Revert-Uncommitted-Changes" class="headerlink" title="Revert Uncommitted Changes"></a>Revert Uncommitted Changes</h3><p>Let us suppose Jerry accidentally modifies a file from his local repository. But he wants to undo his modification. To handle this situation, we can use the <strong>git checkout</strong> command. We can use this command to revert the contents of a file.</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">[jerry<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>pwd<br>/home/jerry/jerry_repo/project/src<br><br>[jerry<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git status -s<br>M string_operations.c<br><br>[jerry<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git checkout string_operations.c<br><span class="hljs-title class_">Updated</span> <span class="hljs-number">1</span> path from the index<br><br>[jerry<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git status –s<br></code></pre></div></td></tr></table></figure><p>Further, we can use the <strong>git checkout</strong> command to obtain a deleted file from the local repository. Let us suppose Tom deletes a file from the local repository and we want this file back. We can achieve this by using the same command.</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir">[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>pwd<br>/home/tom/top_repo/project/src<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>ls <span class="hljs-number">-1</span><br><span class="hljs-title class_">Makefile</span><br>string_operations.c<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>rm string_operations.c<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>ls <span class="hljs-number">-1</span><br><span class="hljs-title class_">Makefile</span><br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git status -s<br>D string_operations.c<br></code></pre></div></td></tr></table></figure><p>Git is showing the letter <strong>D</strong> before the filename. This indicates that the file has been deleted from the local repository.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git checkout string_operations.c<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>ls -<span class="hljs-number">1</span><br>Makefile<br>string_operations.c<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git status -s<br></code></pre></div></td></tr></table></figure><p><strong>Note</strong> − We can perform all these operations before commit.</p><h3 id="Remove-Changes-from-Staging-Area"><a href="#Remove-Changes-from-Staging-Area" class="headerlink" title="Remove Changes from Staging Area"></a>Remove Changes from Staging Area</h3><p>We have seen that when we perform an add operation, the files move from the local repository to the stating area. If a user accidently modifies a file and adds it into the staging area, he can revert his changes, by using the <strong>git checkout</strong> command.</p><p>In Git, there is one HEAD pointer that always points to the latest commit. If you want to undo a change from the staged area, then you can use the git checkout command, but with the checkout command, you have to provide an additional parameter, i.e., the HEAD pointer. The additional commit pointer parameter instructs the git checkout command to reset the working tree and also to remove the staged changes.</p><p>Let us suppose Tom modifies a file from his local repository. If we view the status of this file, it will show that the file was modified but not added into the staging area.</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">tom@CentOS src]$ <span class="hljs-built_in">pwd</span><br>/home/tom/top_repo/project/src<br><span class="hljs-comment"># Unmodified file</span><br><br>[tom@CentOS src]$ git status -s<br><br><span class="hljs-comment"># Modify file and view it’s status.</span><br>[tom@CentOS src]$ git status -s<br>M string_operations.c<br><br>[tom@CentOS src]$ git add string_operations.c<br></code></pre></div></td></tr></table></figure><p>Git status shows that the file is present in the staging area, now revert it by using the git checkout command and view the status of the reverted file.</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs crystal">[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git checkout HEAD -- string_operations.c<br><br>[tom<span class="hljs-variable">@CentOS</span> src]<span class="hljs-variable">$ </span>git status -s<br></code></pre></div></td></tr></table></figure><h3 id="Move-HEAD-Pointer-with-Git-Reset"><a href="#Move-HEAD-Pointer-with-Git-Reset" class="headerlink" title="Move HEAD Pointer with Git Reset"></a>Move HEAD Pointer with Git Reset</h3><p>After doing few changes, you may decide to remove these changes. The Git reset command is used to reset or revert changes. We can perform three different types of reset operations.</p><p>Below diagram shows the pictorial representation of Git reset command.</p><p><img src="https://www.tutorialspoint.com/git/images/before_git_reset.png"></p><p><img src="https://www.tutorialspoint.com/git/images/after_git_reset.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>焦虑抑郁：别吃这几种食品</title>
    <link href="/2022/04/07/%E7%84%A6%E8%99%91%E6%8A%91%E9%83%81%EF%BC%9A%E5%88%AB%E5%90%83%E8%BF%99%E5%87%A0%E7%A7%8D%E9%A3%9F%E5%93%81/"/>
    <url>/2022/04/07/%E7%84%A6%E8%99%91%E6%8A%91%E9%83%81%EF%BC%9A%E5%88%AB%E5%90%83%E8%BF%99%E5%87%A0%E7%A7%8D%E9%A3%9F%E5%93%81/</url>
    
    <content type="html"><![CDATA[<h1 id="焦虑抑郁：别吃这几种食品"><a href="#焦虑抑郁：别吃这几种食品" class="headerlink" title="焦虑抑郁：别吃这几种食品"></a>焦虑抑郁：别吃这几种食品</h1><ul><li><p>咖啡因</p></li><li><p>尼古丁</p></li><li><p>过多的食盐</p></li><li><p>过量饮酒</p></li><li><p>低血糖</p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>焦虑</tag>
      
      <tag>抑郁</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chapter 11 使用固件库点亮 LED</title>
    <link href="/2022/04/06/Chapter-11-Blink-LED-With-StdLib/"/>
    <url>/2022/04/06/Chapter-11-Blink-LED-With-StdLib/</url>
    
    <content type="html"><![CDATA[<h1 id="Chapter-11-使用固件库点亮-LED"><a href="#Chapter-11-使用固件库点亮-LED" class="headerlink" title="Chapter 11    使用固件库点亮 LED"></a>Chapter 11    使用固件库点亮 LED</h1><h3 id="编程要点："><a href="#编程要点：" class="headerlink" title="编程要点："></a>编程要点：</h3><ul><li>全能 GPIO 端口时钟</li><li>初始化 GPIO 目标引脚为推挽输出模式</li><li>编写简单测试程序：控制 GPIO 引脚输出高、低电平</li></ul><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><p>1、LED 引脚宏定义</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// LED_G: PA5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_G_GPIO_PORTGPIOA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LED_G_GPIO_CLKRCC_APB2Periph_GPIOA</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>LED_G_GPIO_PINGPIO_Pin_5</span><br></code></pre></div></td></tr></table></figure><p>2、控制 LED 亮灭状态的宏定义</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/* Directly manipulate regsisters to control I/O */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> digitalHi(p, i)(p-&gt;BSRR = i)<span class="hljs-comment">// Output High</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> digitalLo(p, i)(p-&gt;BRR = i)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> digitalToggle(p, i)(p-&gt;ODR ^= i)</span><br><br><span class="hljs-comment">/* Definition macros of Controlling I/Os */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>LED_G_ONdigitalHi(LED_G_GPIO_PORT, LED_G_GPIO_PIN)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>LED_G_OFFdigitalLo(LED_G_GPIO_PORT, LED_G_GPIO_PIN)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>LED_G_TOGGLEdigitalToggle(LED_G_GPIO_PORT, LED_G_GPIO_PIN)</span><br></code></pre></div></td></tr></table></figure><p>3、LED GPIO 初始化函数</p><ul><li>使用 GPIO_InitTypeDef 定义 GPIO 初始化结构体变量，用于存储 GPIO 配置</li><li>调用库函数 RCC_APB2PeriphClockCmd 来使能 LED 的 GPIO 端口时钟：<code>RCC_APB2Periph_GPIOA</code></li><li>向 GPIO 初始化结构体成员赋值</li><li>输入上面的结构体地址，调用 GPIO_Init 完成 GPIO 初始化</li><li>使用同样的初始化结构体，只修改控制的引脚和端口，初始化其它 LED 使用的 GPIO 引脚</li><li>控制所有 LED 灯默认关闭。</li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">LED_GPIO_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">/*  */</span><br>GPIO_InitTypeDefGPIO_InitStructure;<br><br><span class="hljs-comment">/* Turn on Port clock of LEDs */</span><br>RCC_APB2PeriphClockCmd(LED_G_GPIO_CLK|\<br> LED_R_GPIO_CLK|\<br> LED_B_GPIO_CLK, ENABLE);<br><span class="hljs-comment">/* Initial LED_G Pin */</span><br>GPIO_InitStructure.GPIO_Pin = LED_G_GPIO_PIN;<br>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;<br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<br><br>GPIO_Init(LED_G_GPIO_PORT, &amp;GPIO_InitStructure);<br><br><span class="hljs-comment">/* Initial LED_R Pin */</span><br>GPIO_InitStructure.GPIO_Pin = LED_R_GPIO_PIN;<br>GPIO_Init(LED_R_GPIO_PORT, &amp;GPIO_InitStructure);<br><br><span class="hljs-comment">/* Initial LED_B Pin */</span><br>GPIO_InitStructure.GPIO_Pin = LED_B_GPIO_PIN;<br>GPIO_Init(LED_B_GPIO_PORT, &amp;GPIO_InitStructure);<br><br><span class="hljs-comment">/* Turn off all LEDs */</span><br>GPIO_ResetBits(LED_G_GPIO_PORT, LED_G_GPIO_PIN);<br>GPIO_ResetBits(LED_R_GPIO_PORT, LED_R_GPIO_PIN);<br>GPIO_ResetBits(LED_B_GPIO_PORT, LED_B_GPIO_PIN);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、main 函数</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// System clock  has been set to 72MHz</span><br><br>LED_GPIO_Config();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>LED_G_ON;<br>SOFT_DELAY;<br>LED_G_OFF;<br>SOFT_DELAY;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="下载验证"><a href="#下载验证" class="headerlink" title="下载验证"></a>下载验证</h3><h2 id="STM32-标准库补充知识"><a href="#STM32-标准库补充知识" class="headerlink" title="STM32 标准库补充知识"></a>STM32 标准库补充知识</h2><p>1、SystemInit 函数在哪里<br>在标准库的 system_stm32f10x.c 文件中定义了<br>SystemInit 函数把 STM32 芯片的系统时钟设置成了 72MHz，即，</p><ul><li>AHB 时钟频率为 72MHz</li><li>APB2 时钟频率为 72MHz</li><li>APB1 时钟频率为 36MHz</li></ul><p>2、断言<br>使能断言，定义 USE_FULL_ASSERT 宏。<br>库文件只写了函数声明，函数定义要我们自己写：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">assert_failed</span><span class="hljs-params">(<span class="hljs-type">uint8_t</span>* file, <span class="hljs-type">uint32_t</span> line)</span><br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;r\n\ 输入的参数错误，错误文件名=%s, 等号=%s&quot;</span>, file, line);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、Doxygen 注释规范</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*@briefSimple delay</span><br><span class="hljs-comment">*@param__IO uint32_t nCount</span><br><span class="hljs-comment">*@retvalnone</span><br><span class="hljs-comment">*/</span><br></code></pre></div></td></tr></table></figure><p>4、防止头文件重复包含</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>__BSP_LED_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>__BSP_LED_H</span><br><br><span class="hljs-comment">/* Some codes here... */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span><span class="hljs-comment">// *&lt;! End of __BSP_LED_H</span></span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learning Task/ To-do List</title>
    <link href="/2022/04/06/Learning-task-list/"/>
    <url>/2022/04/06/Learning-task-list/</url>
    
    <content type="html"><![CDATA[<h1 id="Learning-Task-x2F-To-do-List"><a href="#Learning-Task-x2F-To-do-List" class="headerlink" title="Learning Task&#x2F; To-do List"></a>Learning Task&#x2F; To-do List</h1><h2 id="To-do-Lists"><a href="#To-do-Lists" class="headerlink" title="To-do Lists:"></a>To-do Lists:</h2><ul><li><p><a href="https://github.com/tickstep">tickstep</a>&#x2F;<strong><a href="https://github.com/tickstep/aliyunpan">aliyunpan</a></strong></p></li><li><p><a href="https://github.com/messense">messense</a>&#x2F;<strong><a href="https://github.com/messense/aliyundrive-webdav">aliyundrive-webdav</a></strong></p></li><li><p>Hexo theme <strong>code fence</strong> customization</p></li><li><p>Deploy Hexo On Cloud Server</p><ul><li><a href="http://osiris.host/2022/03/20/hexo/hexoDeploy/">Deploy hexo to your own server</a></li><li>Official: <a href="https://hexo.io/docs/one-command-deployment.html#SFTP">One-Command Deployment</a></li></ul></li><li><p><a href="https://theme.typora.io/">typora themes</a> </p></li><li><p>astra theme and plugin</p></li><li><p>Gitbook: <a href="https://docs.gitbook.com/">gitbook.com</a></p></li><li><h6 id="Github-Page-github-io"><a href="#Github-Page-github-io" class="headerlink" title="Github Page: github.io"></a>Github Page: <a href="https://pages.github.com/">github.io</a></h6></li></ul><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">shawncheun.github.io<br>shawn<br></code></pre></div></td></tr></table></figure><ul><li><p>git lesson</p></li><li><p>dropbox paper</p></li><li><p><a href="https://paper.dropbox.com/doc/Hexo---BfGKJ2mUMzUj8efxdOm_aofRAQ-7zSMDUvNPffmjdilVv3AA">使用 Hexo 建置網站</a></p></li><li><p>GA: google analyze</p></li></ul><h2 id="Learning-Lists"><a href="#Learning-Lists" class="headerlink" title="Learning Lists:"></a>Learning Lists:</h2><h3 id="wordpress"><a href="#wordpress" class="headerlink" title="wordpress"></a>wordpress</h3><h4 id="plugins"><a href="#plugins" class="headerlink" title="plugins:"></a>plugins:</h4><ul><li>page builder</li><li>Markdown plugin</li></ul><h4 id="Themes"><a href="#Themes" class="headerlink" title="Themes:"></a>Themes:</h4><ul><li>Twenty Twelve</li><li>Twenty Sixteen</li><li>Ｓaccha One</li><li>Padma Blog</li></ul><h4 id="静态框架"><a href="#静态框架" class="headerlink" title="静态框架:"></a>静态框架:</h4><ul><li>Hexo.io </li><li>jkeyllrb.com</li><li>gohugo.org</li><li><a href="https://vuepress.vuejs.org/">VuePress</a></li><li>solo.b3log.org</li></ul><h4 id="图床："><a href="#图床：" class="headerlink" title="图床："></a>图床：</h4><ul><li>firebase: free plan</li></ul><h4 id="图库："><a href="#图库：" class="headerlink" title="图库："></a>图库：</h4><ul><li><a href="https://wallpaperhub.app/">https://wallpaperhub.app/</a></li><li><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></li><li><a href="https://unsplash.com/">https://unsplash.com/</a></li></ul><hr><h2 id="Hints-and-Tips"><a href="#Hints-and-Tips" class="headerlink" title="Hints and Tips:"></a>Hints and Tips:</h2><h3 id="vs-to-open-a-directory"><a href="#vs-to-open-a-directory" class="headerlink" title="vs to open a directory"></a>vs to open a directory</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash"><span class="hljs-built_in">cd</span> /usr/share/apache2</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">code .</span><br></code></pre></div></td></tr></table></figure><h3 id="Open-Current-Path-in-Linux-Terminal"><a href="#Open-Current-Path-in-Linux-Terminal" class="headerlink" title="Open Current Path in Linux Terminal"></a>Open Current Path in Linux Terminal</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">$ cd <span class="hljs-regexp">/usr/</span>share/apache2<br>$ open .<span class="hljs-regexp">//</span> or: xdg-open .<br></code></pre></div></td></tr></table></figure><h3 id="Hexo：文章-URL-被编码"><a href="#Hexo：文章-URL-被编码" class="headerlink" title="Hexo：文章 URL 被编码"></a>Hexo：文章 URL 被编码</h3><p>Hexo 文章的 url 在根目录配置文件<code>_config.yml</code> 中的<code> permalink</code> 进行配置，默认配置如下：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs elixir"><span class="hljs-symbol">permalink:</span> <span class="hljs-symbol">:year/</span><span class="hljs-symbol">:month/</span><span class="hljs-symbol">:day/</span><span class="hljs-symbol">:title/</span> <br></code></pre></div></td></tr></table></figure><p>这里的<code>:title</code> 为 <code>source/_post</code> 下的相对路径。</p><p>对于中文标题，就会被 Encode 的转码导致 url 奇长无比。</p><p><strong>对应方案：</strong></p><ul><li>修改文章文件名为只包含英文字母、数字及划线，如：</li></ul><figure class="highlight ada"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ada">Chapter-<span class="hljs-number">11</span>-Blink-LED-<span class="hljs-keyword">With</span>-StdLib.md<br></code></pre></div></td></tr></table></figure><ul><li>文章内容（主要是 Front Matter 内容）：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Chapter</span> <span class="hljs-number">11</span> <span class="hljs-string">使用固件库点亮</span> <span class="hljs-string">LED</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2022-04-06 23:25:38</span><br><span class="hljs-attr">tags:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">Programming</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">STM32</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-comment"># Chapter 11使用固件库点亮 LED// This is H1</span><br></code></pre></div></td></tr></table></figure><h3 id="List-contents-in-Linux"><a href="#List-contents-in-Linux" class="headerlink" title="List contents in Linux"></a>List contents in Linux</h3><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs awk">ls<br>ll <span class="hljs-regexp">//</span> detailed<br></code></pre></div></td></tr></table></figure><hr><h3 id="github-io"><a href="#github-io" class="headerlink" title="github.io"></a><a href="https://pages.github.com/">github.io</a></h3><ul><li>shawncheun.github.io</li></ul>]]></content>
    
    
    <categories>
      
      <category>STM32S</category>
      
    </categories>
    
    
    <tags>
      
      <tag>To-do</tag>
      
      <tag>Learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown Reference</title>
    <link href="/2022/04/06/Markdown%20Reference/"/>
    <url>/2022/04/06/Markdown%20Reference/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-Sample"><a href="#Markdown-Sample" class="headerlink" title="Markdown Sample"></a>Markdown Sample</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><strong>Markdown</strong> is created by <a href="http://daringfireball.net/">Daring Fireball</a>; the original guideline is <a href="http://daringfireball.net/projects/markdown/syntax">here</a>. Its syntax, however, varies between different parsers or editors. <strong>Typora</strong> is using <a href="https://help.github.com/articles/github-flavored-markdown/">GitHub Flavored Markdown</a>.</p><p>[toc]</p><h2 id="Block-Elements"><a href="#Block-Elements" class="headerlink" title="Block Elements"></a>Block Elements</h2><h3 id="Paragraph-and-line-breaks"><a href="#Paragraph-and-line-breaks" class="headerlink" title="Paragraph and line breaks"></a>Paragraph and line breaks</h3><p>A paragraph is simply one or more consecutive lines of text. In markdown source code, paragraphs are separated by two or more blank lines. In Typora, you only need one blank line (press <code>Return</code> once) to create a new paragraph.</p><p>Press <code>Shift</code> + <code>Return</code> to create a single line break. Most other markdown parsers will ignore single line breaks, so in order to make other markdown parsers recognize your line break, you can leave two spaces at the end of the line, or insert <code>&lt;br/&gt;</code>.</p><h3 id="Headers"><a href="#Headers" class="headerlink" title="Headers"></a>Headers</h3><p>Headers use 1-6 hash (<code>#</code>) characters at the start of the line, corresponding to header levels 1-6. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section"># This is an H1</span><br><br><span class="hljs-section">## This is an H2</span><br><br><span class="hljs-section">###### This is an H6</span><br></code></pre></div></td></tr></table></figure><p>In Typora, input ‘#’s followed by title content, and press <code>Return</code> key will create a header.</p><h3 id="Blockquotes"><a href="#Blockquotes" class="headerlink" title="Blockquotes"></a>Blockquotes</h3><p>Markdown uses email-style &gt; characters for block quoting. They are presented as:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-quote">&gt; This is a blockquote with two paragraphs. This is first paragraph.</span><br><span class="hljs-quote">&gt;</span><br><span class="hljs-quote">&gt; This is second pragraph. Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><br><br><br><span class="hljs-quote">&gt; This is another blockquote with one paragraph. There is three empty line to seperate two blockquote.</span><br></code></pre></div></td></tr></table></figure><p>In Typora, inputting ‘&gt;’ followed by your quote contents will generate a quote block. Typora will insert a proper ‘&gt;’ or line break for you. Nested block quotes (a block quote inside another block quote) by adding additional levels of ‘&gt;’.</p><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>Input <code>* list item 1</code> will create an unordered list - the <code>*</code> symbol can be replace with <code>+</code> or <code>-</code>.</p><p>Input <code>1. list item 1</code> will create an ordered list - their markdown source code is as follows:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-section">## un-ordered list</span><br><span class="hljs-bullet">*</span>   Red<br><span class="hljs-bullet">*</span>   Green<br><span class="hljs-bullet">*</span>   Blue<br><br><span class="hljs-section">## ordered list</span><br><span class="hljs-bullet">1.</span>  Red<br><span class="hljs-bullet">2.</span> Green<br><span class="hljs-bullet">3.</span>Blue<br></code></pre></div></td></tr></table></figure><h3 id="Task-List"><a href="#Task-List" class="headerlink" title="Task List"></a>Task List</h3><p>Task lists are lists with items marked as either [ ] or [x] (incomplete or complete). For example:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> [ ] a task list item<br><span class="hljs-bullet">-</span> [ ] list syntax required<br><span class="hljs-bullet">-</span> [ ] normal <span class="hljs-strong">**formatting**</span>, @mentions, #1234 refs<br><span class="hljs-bullet">-</span> [ ] incomplete<br><span class="hljs-bullet">-</span> [x] completed<br></code></pre></div></td></tr></table></figure><p>You can change the complete&#x2F;incomplete state by clicking on the checkbox before the item.</p><h3 id="Fenced-Code-Blocks"><a href="#Fenced-Code-Blocks" class="headerlink" title="(Fenced) Code Blocks"></a>(Fenced) Code Blocks</h3><p>Typora only supports fences in GitHub Flavored Markdown. Original code blocks in markdown are not supported.</p><p>Using fences is easy: Input ``` and press <code>return</code>. Add an optional language identifier after ``` and we’ll run it through syntax highlighting:</p><figure class="highlight plaintext"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs gfm">Here&#x27;s an example:<br><br>```js<br>function test() &#123;<br>  console.log(&quot;notice the blank line before this function?&quot;);<br>&#125;<br>```<br><br>syntax highlighting:<br>```ruby<br>require &#x27;redcarpet&#x27;<br>markdown = Redcarpet.new(&quot;Hello World!&quot;)<br>puts markdown.to_html<br>```<br></code></pre></div></td></tr></table></figure><h3 id="Math-Blocks"><a href="#Math-Blocks" class="headerlink" title="Math Blocks"></a>Math Blocks</h3><p>You can render <em>LaTeX</em> mathematical expressions using <strong>MathJax</strong>.</p><p>To add a mathematical expression, input <code>$$</code> and press the ‘Return’ key. This will trigger an input field which accepts <em>Tex&#x2F;LaTex</em> source. For example:</p><p>$$<br>\mathbf{V}_1 \times \mathbf{V}_2 &#x3D;  \begin{vmatrix}<br>\mathbf{i} &amp; \mathbf{j} &amp; \mathbf{k} \<br>\frac{\partial X}{\partial u} &amp;  \frac{\partial Y}{\partial u} &amp; 0 \<br>\frac{\partial X}{\partial v} &amp;  \frac{\partial Y}{\partial v} &amp; 0 \<br>\end{vmatrix}<br>$$</p><p>In the markdown source file, the math block is a <em>LaTeX</em> expression wrapped by a pair of ‘$$’ marks:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">$$<br>\mathbf&#123;V&#125;<span class="hljs-emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125;<br>\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\<br>\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\<br>\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\<br>\end&#123;vmatrix&#125;<br>$$<br></code></pre></div></td></tr></table></figure><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><p>Input <code>| First Header  | Second Header |</code> and press the <code>return</code> key. This will create a table with two columns.</p><p>After a table is created, putting focus on that table will open up a toolbar for the table where you can resize, align, or delete the table. You can also use the context menu to copy and add&#x2F;delete individual columns&#x2F;rows.</p><p>The full syntax for tables is described below, but it is not necessary to know the full syntax in detail as the markdown source code for tables is generated automatically by Typora.</p><p>In markdown source code, they look like:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| First Header  | Second Header |<br>| ------------- | ------------- |<br>| Content Cell  | Content Cell  |<br>| Content Cell  | Content Cell  |<br></code></pre></div></td></tr></table></figure><p>You can also include inline Markdown such as links, bold, italics, or strikethrough in the table.</p><p>Finally, by including colons (<code>:</code>) within the header row, you can define text in that column to be left-aligned, right-aligned, or center-aligned:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">| Left-Aligned  | Center Aligned  | Right Aligned |<br>| :------------ |:---------------:| -----:|<br>| col 3 is      | some wordy text | $1600 |<br>| col 2 is      | centered        |   $12 |<br>| zebra stripes | are neat        |    $1 |<br></code></pre></div></td></tr></table></figure><p>A colon on the left-most side indicates a left-aligned column; a colon on the right-most side indicates a right-aligned column; a colon on both sides indicates a center-aligned column.</p><h3 id="Footnotes"><a href="#Footnotes" class="headerlink" title="Footnotes"></a>Footnotes</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">You can create footnotes like this[^footnote].<br><br>[<span class="hljs-symbol">^footnote</span>]: <span class="hljs-link">Here is the *text* of the **footnote**.</span><br></code></pre></div></td></tr></table></figure><p>will produce:</p><p>You can create footnotes like this[^footnote].</p><p>[^footnote]: Here is the <em>text</em> of the <strong>footnote</strong>.</p><p>Hover over the ‘footnote’ superscript to see content of the footnote.</p><h3 id="Horizontal-Rules"><a href="#Horizontal-Rules" class="headerlink" title="Horizontal Rules"></a>Horizontal Rules</h3><p>Inputting <code>***</code> or <code>---</code> on a blank line and pressing <code>return</code> will draw a horizontal line.</p><hr><h3 id="YAML-Front-Matter"><a href="#YAML-Front-Matter" class="headerlink" title="YAML Front Matter"></a>YAML Front Matter</h3><p>Typora now supports <a href="http://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a>. Input <code>---</code> at the top of the article and then press <code>Return</code> to introduce a metadata block. Alternatively, you can insert a metadata block from the top menu of Typora.</p><h3 id="Table-of-Contents-TOC"><a href="#Table-of-Contents-TOC" class="headerlink" title="Table of Contents (TOC)"></a>Table of Contents (TOC)</h3><p>Input <code>[toc]</code> and press the <code>Return</code> key. This will create a  “Table of Contents” section. The TOC extracts all headers from the document, and its contents are updated automatically as you add to the document.</p><h2 id="Span-Elements"><a href="#Span-Elements" class="headerlink" title="Span Elements"></a>Span Elements</h2><p>Span elements will be parsed and rendered right after typing. Moving the cursor in middle of those span elements will expand those elements into markdown source. Below is an explanation of the syntax for each span element.</p><h3 id="Links"><a href="#Links" class="headerlink" title="Links"></a>Links</h3><p>Markdown supports two styles of links: inline and reference.</p><p>In both styles, the link text is delimited by [square brackets].</p><p>To create an inline link, use a set of regular parentheses immediately after the link text’s closing square bracket. Inside the parentheses, put the URL where you want the link to point, along with an optional title for the link, surrounded in quotes. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>](<span class="hljs-link">http://example.com/ &quot;Title&quot;</span>) inline link.<br><br>[<span class="hljs-string">This link</span>](<span class="hljs-link">http://example.net/</span>) has no title attribute.<br></code></pre></div></td></tr></table></figure><p>will produce:</p><p>This is <a href="http://example.com/" title="Title">an example</a> inline link. (<code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;</code>)</p><p><a href="http://example.net/">This link</a> has no title attribute. (<code>&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no</code>)</p><h4 id="Internal-Links"><a href="#Internal-Links" class="headerlink" title="Internal Links"></a>Internal Links</h4><p><strong>You can set the href to headers</strong>, which will create a bookmark that allow you to jump to that section after clicking. For example:</p><p>Command(on Windows: Ctrl) + Click <a href="#block-elements">This link</a> will jump to header <code>Block Elements</code>. To see how to write that, please move cursor or click that link with <code>⌘</code> key pressed to expand the element into markdown source.</p><h4 id="Reference-Links"><a href="#Reference-Links" class="headerlink" title="Reference Links"></a>Reference Links</h4><p>Reference-style links use a second set of square brackets, inside which you place a label of your choosing to identify the link:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">This is [<span class="hljs-string">an example</span>][<span class="hljs-symbol">id</span>] reference-style link.<br><br>Then, anywhere in the document, you define your link label on a line by itself like this:<br><br>[<span class="hljs-symbol">id</span>]: <span class="hljs-link">http://example.com/  &quot;Optional Title Here&quot;</span><br></code></pre></div></td></tr></table></figure><p>In Typora, they will be rendered like so:</p><p>This is <a href="http://example.com/" title="Optional Title Here">an example</a> reference-style link.</p><p>The implicit link name shortcut allows you to omit the name of the link, in which case the link text itself is used as the name. Just use an empty set of square brackets — for example, to link the word “Google” to the google.com web site, you could simply write:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">[<span class="hljs-string">Google</span>][<span class="hljs-symbol"></span>]<br>And then define the link:<br><br>[<span class="hljs-symbol">Google</span>]: <span class="hljs-link">http://google.com/</span><br></code></pre></div></td></tr></table></figure><p>In Typora, clicking the link will expand it for editing, and command+click will open the hyperlink in your web browser.</p><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p>Typora allows you to insert URLs as links, wrapped by <code>&lt;</code>brackets<code>&gt;</code>.</p><p><code>&lt;i@typora.io&gt;</code> becomes <a href="mailto:&#x69;&#x40;&#116;&#121;&#112;&#x6f;&#114;&#x61;&#46;&#105;&#x6f;">&#x69;&#x40;&#116;&#121;&#112;&#x6f;&#114;&#x61;&#46;&#105;&#x6f;</a>.</p><p>Typora will also automatically link standard URLs. e.g: <a href="http://www.google.com/">www.google.com</a>.</p><h3 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h3><p>Images have similar syntax as links, but they require an additional <code>!</code> char before the start of the link. The syntax for inserting an image looks like this:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg</span>)<br><br>![<span class="hljs-string">Alt text</span>](<span class="hljs-link">/path/to/img.jpg &quot;Optional title&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>You are able to use drag &amp; drop to insert an image from an image file or your web browser. You can modify the markdown source code by clicking on the image. A relative path will be used if the image that is added using drag &amp; drop is in same directory or sub-directory as the document you’re currently editing.</p><p>If you’re using markdown for building websites, you may specify a URL prefix for the image preview on your local computer with property <code>typora-root-url</code> in YAML Front Matters. For example, input <code>typora-root-url:/User/Abner/Website/typora.io/</code> in YAML Front Matters, and then <code>![alt](/blog/img/test.png)</code> will be treated as <code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code> in Typora.</p><p>You can find more details <a href="https://support.typora.io/Images/">here</a>.</p><h3 id="Emphasis"><a href="#Emphasis" class="headerlink" title="Emphasis"></a>Emphasis</h3><p>Markdown treats asterisks (<code>*</code>) and underscores (<code>_</code>) as indicators of emphasis. Text wrapped with one <code>*</code> or <code>_</code> will be wrapped with an HTML <code>&lt;em&gt;</code> tag. E.g:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-emphasis">*single asterisks*</span><br><br><span class="hljs-emphasis">_single underscores_</span><br></code></pre></div></td></tr></table></figure><p>output:</p><p><em>single asterisks</em></p><p><em>single underscores</em></p><p>GFM will ignore underscores in words, which is commonly used in code and names, like this:</p><blockquote><p>wow_great_stuff</p><p>do_this_and_do_that_and_another_thing.</p></blockquote><p>To produce a literal asterisk or underscore at a position where it would otherwise be used as an emphasis delimiter, you can backslash escape it:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">\<span class="hljs-emphasis">*this text is surrounded by literal asterisks\*</span><br></code></pre></div></td></tr></table></figure><p>Typora recommends using the <code>*</code> symbol.</p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>A double <code>*</code> or <code>_</code> will cause its enclosed contents to be wrapped with an HTML <code>&lt;strong&gt;</code> tag, e.g:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown"><span class="hljs-strong">**double asterisks**</span><br><br><span class="hljs-strong">__double underscores__</span><br></code></pre></div></td></tr></table></figure><p>output:</p><p><strong>double asterisks</strong></p><p><strong>double underscores</strong></p><p>Typora recommends using the <code>**</code> symbol.</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>To indicate an inline span of code, wrap it with backtick quotes (&#96;). Unlike a pre-formatted code block, a code span indicates code within a normal paragraph. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs markdown">Use the <span class="hljs-code">`printf()`</span> function.<br></code></pre></div></td></tr></table></figure><p>will produce:</p><p>Use the <code>printf()</code> function.</p><h3 id="Strikethrough"><a href="#Strikethrough" class="headerlink" title="Strikethrough"></a>Strikethrough</h3><p>GFM adds syntax to create strikethrough text, which is missing from standard Markdown.</p><p><code>~~Mistaken text.~~</code> becomes <del>Mistaken text.</del></p><h3 id="Underlines"><a href="#Underlines" class="headerlink" title="Underlines"></a>Underlines</h3><p>Underline is powered by raw HTML.</p><p><code>&lt;u&gt;Underline&lt;/u&gt;</code> becomes <u>Underline</u>.</p><h3 id="Emoji-smile"><a href="#Emoji-smile" class="headerlink" title="Emoji :smile:"></a>Emoji :smile:</h3><p>Input emoji with syntax <code>:smile:</code>.</p><p>User can trigger auto-complete suggestions for emoji by pressing <code>ESC</code> key, or trigger it automatically after enabling it on preference panel. Also, inputting UTF-8 emoji characters directly is also supported by going to <code>Edit</code> -&gt; <code>Emoji &amp; Symbols</code> in the menu bar (macOS).</p><h3 id="Inline-Math"><a href="#Inline-Math" class="headerlink" title="Inline Math"></a>Inline Math</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>$</code> to wrap a TeX command. For example: <code>$\lim_&#123;x \to \infty&#125; \exp(-x) = 0$</code> will be rendered as LaTeX command.</p><p>To trigger inline preview for inline math: input “$”, then press the <code>ESC</code> key, then input a TeX command.</p><p>You can find more details <a href="https://support.typora.io/Math/">here</a>.</p><h3 id="Subscript"><a href="#Subscript" class="headerlink" title="Subscript"></a>Subscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>~</code> to wrap subscript content. For example: <code>H~2~O</code>, <code>X~long\ text~</code>&#x2F;</p><h3 id="Superscript"><a href="#Superscript" class="headerlink" title="Superscript"></a>Superscript</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>^</code> to wrap superscript content. For example: <code>X^2^</code>.</p><h3 id="Highlight"><a href="#Highlight" class="headerlink" title="Highlight"></a>Highlight</h3><p>To use this feature, please enable it first in the <code>Preference</code> Panel -&gt; <code>Markdown</code> Tab. Then, use <code>==</code> to wrap highlight content. For example: <code>==highlight==</code>.</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>You can use HTML to style content what pure Markdown does not support. For example, use <code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code> to add text with red color.</p><h3 id="Embed-Contents"><a href="#Embed-Contents" class="headerlink" title="Embed Contents"></a>Embed Contents</h3><p>Some websites provide iframe-based embed code which you can also paste into Typora. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&#x27;265&#x27;</span> <span class="hljs-attr">scrolling</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&#x27;Fancy Animated SVG Menu&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#x27;</span> <span class="hljs-attr">frameborder</span>=<span class="hljs-string">&#x27;no&#x27;</span> <span class="hljs-attr">allowtransparency</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">allowfullscreen</span>=<span class="hljs-string">&#x27;true&#x27;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;width: 100%;&#x27;</span>&gt;</span></span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h3><p>You can use the <code>&lt;video&gt;</code> HTML tag to embed videos. For example:</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;xxx.mp4&quot;</span> /&gt;</span></span><br></code></pre></div></td></tr></table></figure><h3 id="Other-HTML-Support"><a href="#Other-HTML-Support" class="headerlink" title="Other HTML Support"></a>Other HTML Support</h3><p>You can find more details <a href="https://support.typora.io/HTML/">here</a>.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>英文范例</tag>
      
      <tag>Referrence</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中文 Markdown</title>
    <link href="/2022/04/06/chinese-markdown/"/>
    <url>/2022/04/06/chinese-markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h3 id="这是-H3"><a href="#这是-H3" class="headerlink" title="这是 H3"></a>这是 H3</h3>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
      <tag>中文范例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chapter 16	STM32 中断应用概览</title>
    <link href="/2022/04/06/Chapter_16_Interrupt/Chapter-16-STM32-Interrupt/"/>
    <url>/2022/04/06/Chapter_16_Interrupt/Chapter-16-STM32-Interrupt/</url>
    
    <content type="html"><![CDATA[<h1 id="Chapter-16-STM32-中断应用概览"><a href="#Chapter-16-STM32-中断应用概览" class="headerlink" title="Chapter 16    STM32 中断应用概览"></a>Chapter 16    STM32 中断应用概览</h1><p>STM32 中断非常强大，每个外设都可以产生中断</p><p>文中所述 “异常就是中断，中断就是异常”</p><h2 id="异常类型"><a href="#异常类型" class="headerlink" title="异常类型"></a>异常类型</h2><ul><li>系统异常有8个，加上 Rest 和 HardFrault 也算上就是 10 个</li><li>外部中断有 60 个</li><li>除个别异常的优先级被固定外，其它异常的优先级都是可以编程的</li></ul><p>系统异常和外部中断在标准库文件 stm32f10x.h  头文件中可查询。</p><p><code>IRQn_Tpye</code> 结构体里包含了 F103 系列全部的异常声明</p><h2 id="NVIC-简介"><a href="#NVIC-简介" class="headerlink" title="NVIC 简介"></a>NVIC 简介</h2><p>NVIC 控制整个芯片中断相关功能。它是内核里面的一个外设。</p><p>STM32 中的 NVIC 是 Cortex-M3 的 NVIC 的一个子集。</p><h3 id="NVIC-寄存器简介"><a href="#NVIC-寄存器简介" class="headerlink" title="NVIC 寄存器简介"></a>NVIC 寄存器简介</h3><p>NVIC 结构体定义，在固件库头文件：<code>core_m3.h</code></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/** @addtogroup CMSIS_CM3_NVIC CMSIS CM3 NVIC</span><br><span class="hljs-comment">  memory mapped structure for Nested Vectored Interrupt Controller (NVIC)</span><br><span class="hljs-comment">  @&#123;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  __IO <span class="hljs-type">uint32_t</span> ISER[<span class="hljs-number">8</span>];                      <span class="hljs-comment">/*!&lt; Offset: 0x000  Interrupt Set Enable Register           */</span><br>       <span class="hljs-type">uint32_t</span> RESERVED0[<span class="hljs-number">24</span>];                                   <br>  __IO <span class="hljs-type">uint32_t</span> ICER[<span class="hljs-number">8</span>];                      <span class="hljs-comment">/*!&lt; Offset: 0x080  Interrupt Clear Enable Register         */</span><br>       <span class="hljs-type">uint32_t</span> RSERVED1[<span class="hljs-number">24</span>];                                    <br>  __IO <span class="hljs-type">uint32_t</span> ISPR[<span class="hljs-number">8</span>];                      <span class="hljs-comment">/*!&lt; Offset: 0x100  Interrupt Set Pending Register          */</span><br>       <span class="hljs-type">uint32_t</span> RESERVED2[<span class="hljs-number">24</span>];                                   <br>  __IO <span class="hljs-type">uint32_t</span> ICPR[<span class="hljs-number">8</span>];                      <span class="hljs-comment">/*!&lt; Offset: 0x180  Interrupt Clear Pending Register        */</span><br>       <span class="hljs-type">uint32_t</span> RESERVED3[<span class="hljs-number">24</span>];                                   <br>  __IO <span class="hljs-type">uint32_t</span> IABR[<span class="hljs-number">8</span>];                      <span class="hljs-comment">/*!&lt; Offset: 0x200  Interrupt Active bit Register           */</span><br>       <span class="hljs-type">uint32_t</span> RESERVED4[<span class="hljs-number">56</span>];                                   <br>  __IO <span class="hljs-type">uint8_t</span>  IP[<span class="hljs-number">240</span>];                      <span class="hljs-comment">/*!&lt; Offset: 0x300  Interrupt Priority Register (8Bit wide) */</span><br>       <span class="hljs-type">uint32_t</span> RESERVED5[<span class="hljs-number">644</span>];                                  <br>  __O  <span class="hljs-type">uint32_t</span> STIR;                         <span class="hljs-comment">/*!&lt; Offset: 0xE00  Software Trigger Interrupt Register     */</span><br>&#125;  NVIC_Type;                                               <br><span class="hljs-comment">/*@&#125;*/</span> <span class="hljs-comment">/* end of group CMSIS_CM3_NVIC */</span><br></code></pre></div></td></tr></table></figure><p>配置中断的时候我们一般只用：</p><ul><li>ISER    ：使能中断</li><li>ICER   ：清除中断</li><li>IP        ：设置中断优先级</li></ul><h3 id="NVIC-中断配置固库"><a href="#NVIC-中断配置固库" class="headerlink" title="NVIC 中断配置固库"></a>NVIC 中断配置固库</h3><p>固件库文件 core_m3.h 的最最后，定了 NVIC 的一些函数。用得比较少，甚至不用，配置中断的时候会用更简洁的方法。</p><h2 id="中断优先级"><a href="#中断优先级" class="headerlink" title="中断优先级"></a>中断优先级</h2><h3 id="优先级定义"><a href="#优先级定义" class="headerlink" title="优先级定义"></a>优先级定义</h3><p>中断优先级寄存器 NVIC_IPRx</p><ul><li>配置外部中断优先级，8 位，只使用高 4 位</li><li>这 4 位又被分成：抢占（主）优先级、子优先级</li><li>多中断响应时按：“抢占优先级 &gt; 子优先级 &gt; 硬件中断编号” 顺序执行</li></ul><p>优先级分组</p><ul><li>由内核外设 SCB-&gt;AIRCR（应用程序中断和复位控制寄存器） 的 PRIGROUP[10:8] 位决定。</li><li>设置优先级分组：NVIC_PriorityGroupConifg()</li><li>有关 NVIC 中断相关的库函数：<code>misc.c</code>、<code>misc.h</code></li></ul><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// NVIC 设置中断优先级分组函数</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * @brief  Configures the priority grouping: pre-emption priority and subpriority.</span><br><span class="hljs-comment">  * @param  NVIC_PriorityGroup: specifies the priority grouping bits length. </span><br><span class="hljs-comment">  *   This parameter can be one of the following values:</span><br><span class="hljs-comment">  *     @arg NVIC_PriorityGroup_0: 0 bits for pre-emption priority</span><br><span class="hljs-comment">  *                                4 bits for subpriority</span><br><span class="hljs-comment">  *     @arg NVIC_PriorityGroup_1: 1 bits for pre-emption priority</span><br><span class="hljs-comment">  *                                3 bits for subpriority</span><br><span class="hljs-comment">  *     @arg NVIC_PriorityGroup_2: 2 bits for pre-emption priority</span><br><span class="hljs-comment">  *                                2 bits for subpriority</span><br><span class="hljs-comment">  *     @arg NVIC_PriorityGroup_3: 3 bits for pre-emption priority</span><br><span class="hljs-comment">  *                                1 bits for subpriority</span><br><span class="hljs-comment">  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority</span><br><span class="hljs-comment">  *                                0 bits for subpriority</span><br><span class="hljs-comment">  * @retval None</span><br><span class="hljs-comment">  */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">NVIC_PriorityGroupConfig</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> NVIC_PriorityGroup)</span><br>&#123;<br>  <span class="hljs-comment">/* Check the parameters */</span><br>  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));<br>  <br>  <span class="hljs-comment">/* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */</span><br>  SCB-&gt;AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>优先级分组真值表：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">============================================================================================================================<br>    NVIC_PriorityGroup   | NVIC_IRQChannelPreemptionPriority | NVIC_IRQChannelSubPriority  | Description<br>  ============================================================================================================================<br>   NVIC_PriorityGroup_0  |                <span class="hljs-number">0</span>                  |            <span class="hljs-number">0</span><span class="hljs-number">-15</span>             |   <span class="hljs-number">0</span> bits <span class="hljs-keyword">for</span> pre-emption priority<br>                         |                                   |                             |   <span class="hljs-number">4</span> bits <span class="hljs-keyword">for</span> subpriority<br>  ----------------------------------------------------------------------------------------------------------------------------<br>   NVIC_PriorityGroup_1  |                <span class="hljs-number">0</span><span class="hljs-number">-1</span>                |            <span class="hljs-number">0</span><span class="hljs-number">-7</span>              |   <span class="hljs-number">1</span> bits <span class="hljs-keyword">for</span> pre-emption priority<br>                         |                                   |                             |   <span class="hljs-number">3</span> bits <span class="hljs-keyword">for</span> subpriority<br>  ----------------------------------------------------------------------------------------------------------------------------    <br>   NVIC_PriorityGroup_2  |                <span class="hljs-number">0</span><span class="hljs-number">-3</span>                |            <span class="hljs-number">0</span><span class="hljs-number">-3</span>              |   <span class="hljs-number">2</span> bits <span class="hljs-keyword">for</span> pre-emption priority<br>                         |                                   |                             |   <span class="hljs-number">2</span> bits <span class="hljs-keyword">for</span> subpriority<br>  ----------------------------------------------------------------------------------------------------------------------------    <br>   NVIC_PriorityGroup_3  |                <span class="hljs-number">0</span><span class="hljs-number">-7</span>                |            <span class="hljs-number">0</span><span class="hljs-number">-1</span>              |   <span class="hljs-number">3</span> bits <span class="hljs-keyword">for</span> pre-emption priority<br>                         |                                   |                             |   <span class="hljs-number">1</span> bits <span class="hljs-keyword">for</span> subpriority<br>  ----------------------------------------------------------------------------------------------------------------------------    <br>   NVIC_PriorityGroup_4  |                <span class="hljs-number">0</span><span class="hljs-number">-15</span>               |            <span class="hljs-number">0</span>                |   <span class="hljs-number">4</span> bits <span class="hljs-keyword">for</span> pre-emption priority<br>                         |                                   |                             |   <span class="hljs-number">0</span> bits <span class="hljs-keyword">for</span> subpriority                       <br>  ============================================================================================================================<br></code></pre></div></td></tr></table></figure><h2 id="中断编程"><a href="#中断编程" class="headerlink" title="中断编程"></a>中断编程</h2><p>配置每个中断的时候，一般有 3 个编程要点：</p><p>1、使能外设某个中断</p><ul><li>具体由每个外设的相关中断全能位控制</li></ul><p>2、初始化 NVIC_InitTypeDef 结构体</p><ul><li><p>配置中断优先级分组</p></li><li><p>设置抢占优先级、子优先级</p></li><li><p>使能中断请求</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// NVIC 初始化结构体</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span></span><br><span class="hljs-class">&#123;</span><br>  <span class="hljs-type">uint8_t</span> NVIC_IRQChannel; <span class="hljs-comment">// 设置中断源：成员配置在 IRQn_Type 枚举型定义</span><br>  <span class="hljs-type">uint8_t</span> NVIC_IRQChannelPreemptionPriority;<span class="hljs-comment">// 抢占优先级，具体值要依据优先级分组来确定</span><br>  <span class="hljs-type">uint8_t</span> NVIC_IRQChannelSubPriority; <span class="hljs-comment">// 子优先级，具体值要依据优先级分组来确定</span><br>  FunctionalState NVIC_IRQChannelCmd;          <span class="hljs-comment">// 中断使能/除能。操作的是：ISER、ICER 两个寄存器</span><br>&#125; NVIC_InitTypeDef;<br></code></pre></div></td></tr></table></figure></li></ul><p>3、编写中断服务函数</p><ul><li>在启动文件中 <code>stm32f10x_startup_md</code>.s 中已预告为每个中断写了一个中断服务函数，内容为空，用于初始化中断向量表</li><li>实际使用的中断服务函数是我们自己重新编写，写在 <code>stm32f10x_it.c</code> 文件中</li><li>中断服务函数的函数名必须与启动文件里预先设置的一样，否则程序跳进启动文件里的空函数无限循环，实现不了中断</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chapter 13 GPIO——位带操作</title>
    <link href="/2022/04/06/folder/Chapter%2013%20GPIO%E2%80%94%E2%80%94%E4%BD%8D%E5%B8%A6%E6%93%8D%E4%BD%9C/"/>
    <url>/2022/04/06/folder/Chapter%2013%20GPIO%E2%80%94%E2%80%94%E4%BD%8D%E5%B8%A6%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="Chapter-13-GPIO——位带操作"><a href="#Chapter-13-GPIO——位带操作" class="headerlink" title="Chapter 13    GPIO——位带操作"></a>Chapter 13    GPIO——位带操作</h1><h2 id="位带简介"><a href="#位带简介" class="headerlink" title="位带简介"></a>位带简介</h2><p>STM32 中，两个地方实现了位带，</p><ul><li>SRAM 区的最低 1MB 空间</li><li>外设区的最低 1MB 空间</li></ul><h3 id="外设位带区"><a href="#外设位带区" class="headerlink" title="外设位带区"></a>外设位带区</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 外设位带区的地址为：</span><br><span class="hljs-number">0x40000000</span> ~ <span class="hljs-number">0x40100000</span><span class="hljs-comment">// 大小为 1MB</span><br><span class="hljs-comment">// 膨胀后的位带别名区地址为：</span><br><span class="hljs-number">0x42000000</span> ~ <span class="hljs-number">0x43FFFFFF</span><br><span class="hljs-comment">// F103 中所有的所上外设寄存器地址为：</span><br><span class="hljs-number">0x40000000</span> ~ <span class="hljs-number">0x40029FFF</span><br></code></pre></div></td></tr></table></figure><h3 id="SRAM-位带区"><a href="#SRAM-位带区" class="headerlink" title="SRAM 位带区"></a>SRAM 位带区</h3><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// SRAM 位带区地址为：</span><br><span class="hljs-number">0x20000000</span> ~ <span class="hljs-number">0x20100000</span><span class="hljs-comment">// 大小为 1MB</span><br><span class="hljs-comment">// 膨胀后的位带别名区地址为：</span><br><span class="hljs-number">0x22000000</span> ~ <span class="hljs-number">0x23FFFFFF</span><br></code></pre></div></td></tr></table></figure><h3 id="位带区和位带别名区的地址转换"><a href="#位带区和位带别名区的地址转换" class="headerlink" title="位带区和位带别名区的地址转换"></a>位带区和位带别名区的地址转换</h3><p>1、外设位带别名区地址</p><p>对于片上外设位带区的某个位，记它所有字节的地址为 A，位序号为 n &#x3D;[0, 7]，则该位在别名区的地址为：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">AliasAddr = <span class="hljs-number">0x42000000</span> + (A - <span class="hljs-number">0x40000000</span>)*<span class="hljs-number">8</span>*<span class="hljs-number">4</span> + n*<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p>2、SRAM 位带别名区地址</p><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">AliasAddr</span> = <span class="hljs-number">0</span>x22000000 + (A - <span class="hljs-number">0</span>x20000000)*<span class="hljs-number">8</span>*<span class="hljs-number">4</span> + n*<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><p>3、统一公式</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 位带地址: addr</span><br><span class="hljs-comment">// 位序号: bitnum</span><br>AliasAddr = (addr &amp; <span class="hljs-number">0xF0000000</span>) + <span class="hljs-number">0x02000000</span> + ((addr &amp; <span class="hljs-number">0x00FFFFFF</span>)&lt;&lt;<span class="hljs-number">5</span>) + (bitnum&lt;&lt;<span class="hljs-number">2</span>)<br></code></pre></div></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 把 “位带地址“ + ”位序号” 转换成位带别名地址的宏</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>BITBAND(addr, bitnum)((addr &amp; 0xF0000000) + 0x02000000 + ((addr &amp; 0x00FFFFFF)&lt;&lt;5) + (bitnum&lt;&lt;2))</span><br></code></pre></div></td></tr></table></figure><p>4、通过指针的形式操作这些位带别名区地址，最终实现位带区的操作</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// 把一个地址轮换成一个指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>MEM_ADDR(addr)*((volatile unsigned long *)(addr))</span><br><span class="hljs-comment">// 把位带别名区地址转换成指针</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> BIT_ADDR(addr, bitnum)MEM_ADDR( BITBAND(addr, bitnum) )</span><br></code></pre></div></td></tr></table></figure><h2 id="GPIO-位带操作"><a href="#GPIO-位带操作" class="headerlink" title="GPIO 位带操作"></a>GPIO 位带操作</h2><p>演示 GPIO 中的 ODR 和 IDR 这两个寄存器的位操作</p><p>ODR 和 IDR 这两个寄存器对应的 GPIO 基地址偏移是 12 和 8</p><p>1、GPIO 寄存器映射</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// GPIO ODR 寄存器映射</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOA_ODR_Addr(GPIOA_BASE + 12)<span class="hljs-comment">// 0x4001080C</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOB_ODR_Addr(GPIOB_BASE + 12)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOC_ODR_Addr(GPIOC_BASE + 12)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOD_ODR_Addr(GPIOD_BASE + 12)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOE_ODR_Addr(GPIOE_BASE + 12)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOF_ODR_Addr(GPIOF_BASE + 12)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOG_ODR_Addr(GPIOG_BASE + 12)</span><br><br><span class="hljs-comment">// GPIO IDR 寄存器映射</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOA_IDR_Addr(GPIOA_BASE + 8)<span class="hljs-comment">// 0x40010808</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOB_IDR_Addr(GPIOB_BASE + 8)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOC_IDR_Addr(GPIOC_BASE + 8)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOD_IDR_Addr(GPIOD_BASE + 8)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOE_IDR_Addr(GPIOE_BASE + 8)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOF_IDR_Addr(GPIOF_BASE + 8)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>GPIOG_IDR_Addr(GPIOG_BASE + 8)</span><br></code></pre></div></td></tr></table></figure><p>2、GPIO 位操作</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-comment">// 单独操作 GPIO 的某一个 I/O 口，n (0~16)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PAout(n) BIT_ADDR(GPIOA_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PAin(n)BIT_ADDR(GPIOA_IDR_Addr, n)</span><br>                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PBout(n) BIT_ADDR(GPIOB_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PBin(n)BIT_ADDR(GPIOB_IDR_Addr, n)</span><br>                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PCout(n) BIT_ADDR(GPIOC_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PCin(n)BIT_ADDR(GPIOC_IDR_Addr, n)</span><br>                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PDout(n) BIT_ADDR(GPIOD_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDin(n)BIT_ADDR(GPIOD_IDR_Addr, n)</span><br>                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PDout(n) BIT_ADDR(GPIOD_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PDin(n)BIT_ADDR(GPIOD_IDR_Addr, n)</span><br>                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PEout(n) BIT_ADDR(GPIOE_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PEin(n)BIT_ADDR(GPIOE_IDR_Addr, n)</span><br>                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PFout(n) BIT_ADDR(GPIOF_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PFin(n)BIT_ADDR(GPIOF_IDR_Addr, n)</span><br>                                                 <br><span class="hljs-meta">#<span class="hljs-keyword">define</span>PGout(n) BIT_ADDR(GPIOG_ODR_Addr, n)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PGin(n)BIT_ADDR(GPIOG_IDR_Addr, n)</span><br></code></pre></div></td></tr></table></figure><p>3、main 函数</p><figure class="highlight wren"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs wren"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*<span class="hljs-doctag">@brief</span>Main function</span><br><span class="hljs-comment">*<span class="hljs-doctag">@param</span>none</span><br><span class="hljs-comment">*<span class="hljs-doctag">@return</span>none</span><br><span class="hljs-comment">*/</span><br>int <span class="hljs-title function_">main</span>(<span class="hljs-params">void</span>)<br>&#123;<br><span class="hljs-comment">// System clock  has been set to 72MHz</span><br><span class="hljs-title function_">LED_GPIO_Config</span>();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-comment">//PA5 = 1, Turn on green LED</span><br><span class="hljs-title class_">PAout</span>(<span class="hljs-number">5</span>)<span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">// Use Bit-band to set I/O.</span><br><span class="hljs-variable">SOFT_DELAY</span>;<br><br><span class="hljs-title class_">PAout</span>(<span class="hljs-number">5</span>)<span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-variable">SOFT_DELAY</span>;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chapter 15 RCC－－使用 HSEHSI 配置时钟</title>
    <link href="/2022/04/06/folder/Chapter%2015%20RCC%EF%BC%8D%EF%BC%8D%E4%BD%BF%E7%94%A8%20HSEHSI%20%E9%85%8D%E7%BD%AE%E6%97%B6%E9%92%9F/"/>
    <url>/2022/04/06/folder/Chapter%2015%20RCC%EF%BC%8D%EF%BC%8D%E4%BD%BF%E7%94%A8%20HSEHSI%20%E9%85%8D%E7%BD%AE%E6%97%B6%E9%92%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="Chapter-15-RCC－－使用-HSE-x2F-HSI-配置时钟"><a href="#Chapter-15-RCC－－使用-HSE-x2F-HSI-配置时钟" class="headerlink" title="Chapter 15    RCC－－使用 HSE&#x2F;HSI 配置时钟"></a>Chapter 15    RCC－－使用 HSE&#x2F;HSI 配置时钟</h1><p>重点理解时钟树</p><h2 id="RCC-主要作用－－时钟部分"><a href="#RCC-主要作用－－时钟部分" class="headerlink" title="RCC 主要作用－－时钟部分"></a>RCC 主要作用－－时钟部分</h2><ul><li>设置系统时钟 SYSCLK</li><li>设置 AHB 分频因子  （决定 HCLK 为多少）</li><li>设置 APB2 分频因子（决定 PCLK2 为多少）</li><li>设置 APB1 分频因子（决定 PCLK1 为多少）</li><li>设置各外设分频因子</li><li>控制 AHB、APB2 和 APB1 的 3 条总线时钟的开启</li><li>控制每个外设时钟的开启</li></ul><p>对于 SYSCLK、HCLK、PCLK2、PCLK1 这 4 个时钟的配置一般是（也是库函数的标准配置）：</p><ul><li>SYSCLK &#x3D; PLLCLK &#x3D; HCLK &#x3D; PCLK2 &#x3D; 72MHz</li><li>PCLK1 &#x3D; HCLK&#x2F;2 &#x3D; 36 MHz</li></ul><h2 id="RCC-框图剖析－－时钟部分"><a href="#RCC-框图剖析－－时钟部分" class="headerlink" title="RCC 框图剖析－－时钟部分"></a>RCC 框图剖析－－时钟部分</h2><h3 id="系统时钟"><a href="#系统时钟" class="headerlink" title="系统时钟"></a>系统时钟</h3><p>1、HSE 高速外部时钟信号</p><ul><li>可以是：有源晶振、无源晶振（需配谐振电容）</li><li>频率为：4 ～ 16 MHz（最常用的是 8 MHz，同 HSI）</li><li>作为 PLL 时钟来源时，可以：<strong>不分频</strong>、2 分频（配置由： CFGR[17] ，即 PLLXTPRE ）</li></ul><p>2、PLL 时钟源</p><ul><li>PLL 时钟来源：<strong>HSE</strong>、HSI&#x2F;2 （配置由：CFGR[16]，即 PLLSRC ）</li><li>HSI 内部高速时钟（8 MHz），一般不作 PLL 的时钟来源，频率会漂移（测试和环境）</li></ul><p>3、PLL 时钟 PLLCLK</p><ul><li>PLL 倍频因子（2 ~ 16）（配置由：CFGR[21:18]，即 PLLMUL[3:0]），这里设置 <strong>9</strong> （9x8&#x3D;72MHz）</li><li>PLLCLK 最高为 128 MHz，官方推荐 PLLCLK &#x3D; 8 x 9 &#x3D; 72ＭHz</li></ul><p>4、系统时钟 SYSCLK</p><ul><li>系统时钟来源可以是：HSI、HSE、<strong>PLLCLK</strong>（配置由：CFGR[1:0]，即 SW[1:0]）</li><li>这里设置系统时钟为：SYSCLK &#x3D; PLLCK &#x3D; 72MHz</li></ul><p>5、AHB 总线时钟 HCLK</p><ul><li>AHB 分频因子（<strong>1</strong>、2、4、8、16、64、128、256、512）（配置由：CFGR[7:4]，即 HPRE[3:0]）</li><li>分频后为 AHB 时钟 HCLK。片上大部分外设的时钟都是由 HCLK 分频得到的</li><li>这里 HCLK &#x3D; SYSCLK &#x3D; 72MHz</li></ul><p>6、APB2 总线时钟 PCLK2</p><ul><li>PCLK2 由 HCLK 经过 APB2 预分频器而得。分频因子（<strong>1</strong>、2、8、16）（配置由：CFGR[13:11]，即 PPRE2[2:0]）</li><li>PCLK2 为高速的总线时钟，最高为 72MHz。为片上高速外设挂载，如：GPIO、USART1、SPI1等</li><li>这里 PCLK2 &#x3D; HCLK &#x3D;72MHz</li></ul><p>7、APB1 总线时钟 PCLK1</p><ul><li>PCLK1 由 HCLK 经过 APB1 预分频器而得。分频因子（1、<strong>2</strong>、8、16）（配置由：CFGR[10:8]，即 PPRE1[2:0]）</li><li>PCLK1 为低速的总线时钟，最高为 32MHz。为片上低速外设挂载，如：USART2&#x2F;3&#x2F;4&#x2F;5、SPI2&#x2F;3、IIC1&#x2F;2 等</li><li>这里 PCLK1 &#x3D; HCLK&#x2F;2 &#x3D; 36MHz</li></ul><p>以上 7 个步骤对应的系统时钟设置的库函数，参考库文件 <strong>system_stm32f10x.c</strong> 中函数 <strong>SetSysClockTo72()</strong> 。函数是直接操作寄存器的。</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs"><br></code></pre></div></td></tr></table></figure><h3 id="其它时钟"><a href="#其它时钟" class="headerlink" title="其它时钟"></a>其它时钟</h3><p>1、USB 时钟 USBCLK</p><ul><li>由 PLLCLK 经过 USB 预分频器而得。分频因子（1、1.5）（配置由：CFGR[22]，即 USBPRE）</li><li>最高是 48MHz，由分频因子倒推，PLLCLK 只能是 <strong>48MHz</strong>、72MHz。一般设置 PLLCLK &#x3D;72MHz，USBCLK &#x3D; 48MHz</li><li>USB 对时钟要求比较高，所以 PLLCLK 只能是 HSE 倍频得到，不能使用 HSI 倍频</li></ul><p>2、Cortex 系统时钟</p><ul><li>由 HCLK 8 分频得到：<strong>9MHz</strong></li><li>用于驱动内核的系统定时器 SysTick，用于操作系统的时钟节拍</li><li>SysTick 也可以用作普通定时</li></ul><p>3、ADC 时钟 ADCCLK</p><ul><li>由 PCLK2 经过 ADC 预分频器得到。分频因子（2、4、6、8）（配置由：CFGR[15:14]，即 ADCPRE[1:0]）</li><li>ADCCLK 最高是 14MHz</li><li>如果 ADC 采样周期设成 1.5 个周斯，ADC 的转换时间可以达到最短 1uS，那么时钟就是 14MHz，反推 PCLK2 只能是 28MHz、56MHz、84MHz、112MHz。因为 PCLK2 最高是 72MHz，所以只能取 28MHz、56MHz</li></ul><p>4、RTC 时钟（RTCCLK）独立看门狗时钟（IDWGCLK）</p><ul><li>RTCCLK 来源可以是：HSE&#x2F;128、LSE（32.768K）、LSI。（选择由：BDCR[9:8]，即 RTCSEL[1:0]）</li><li>IDWGCLK 只能由 LSI 提供 （LSI：30 ~ 60KHz，一般取 40KHz）</li></ul><p>5、MCO 时钟输入</p><ul><li>Microcontroller Clock Output，STM32F1 中由 PA8 复用所得，主要是对外提供时钟信号</li><li>MCO 时钟来源可以是：PLLCLK&#x2F;2、SYSCLK、HSE、HSI。（选择由：CFGR[26:24]，即 MCO[2:0]）</li><li>可用示波器监控，以此检查系统时钟是否正确配置</li></ul><h2 id="配置系统时钟实验"><a href="#配置系统时钟实验" class="headerlink" title="配置系统时钟实验"></a>配置系统时钟实验</h2><h3 id="使用-HSE"><a href="#使用-HSE" class="headerlink" title="使用 HSE"></a>使用 HSE</h3><ul><li>一般情况，都是使用 HSE（8MHz）</li><li>经过 PLL 倍频（x9）后作为系统时钟</li><li>在 main 函数前，启动文件 已经调用 SystemInit() 频数，把系统时钟初始化成 72MHz</li><li>自己设置系统时钟时，一般不修改底层库文件，而是由上述时钟树流程自己写一个。</li></ul><h3 id="使用-HSI"><a href="#使用-HSI" class="headerlink" title="使用 HSI"></a>使用 HSI</h3><ul><li>一般不作 PLL 的时钟来源，频率会漂移（测试和环境）</li><li>HSE 故障时，HSE 和 PLL 都会被关闭，系统会自动切换 HSI 作为系统时钟，这时 SYSCLK &#x3D; HSI &#x3D; 8MHz</li><li>当 HSE 故障时要采取报警措施。</li></ul><p>如果用户想使用 HSI，自己编程程序，思路如下。</p><h3 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h3><p>缩写两个 RCC 驱动文件：<code>bsp_clock.h</code>、<code>bsp_clock.c</code></p><p>1、编程要求</p><ul><li>RCC 外设初始化到复位状态</li><li>开启 HSE&#x2F;HSI，并等待 HSE&#x2F;HSI 稳定</li><li>设置 AHB、APB2、APB1 的预分频因子</li><li>设置 PLL的时钟来源、倍频因子（各种频率主要在这里设置）</li><li>开启 PLL，并等待 PLL 稳定</li><li>把 PLLCLK 切换为系统时钟 SYSCLK</li><li>读取时钟切换状态，确保 PLLCLK 被选为系统时钟</li></ul><p>2、代码分析</p><p>1、使用 HSE 配置系统时钟</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*@briefConfig HSE and set it as system clock</span><br><span class="hljs-comment">*@param pllmul: PLLCLK = 8MHz * RCC_PLLMul, RCC_PLLMul_x, x=2~16</span><br><span class="hljs-comment">*@retvalnone</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HSE_SetSysClock</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> RCC_PLLMul)</span><br>&#123;<br>__IO <span class="hljs-type">uint32_t</span> HSEStartUpStatus = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* Deinitialize RCC */</span><br>RCC_DeInit();<br><br><span class="hljs-comment">// Enable HSE</span><br>RCC_HSEConfig(RCC_HSE_ON);<br><br><span class="hljs-comment">// Wait HSE Start up</span><br>HSEStartUpStatus = RCC_WaitForHSEStartUp();<br><br><span class="hljs-keyword">if</span>(HSEStartUpStatus == SUCCESS)<br>&#123;<br><span class="hljs-comment">//-----------------------------------------------------------</span><br><span class="hljs-comment">// Enable flash prefetch buffer</span><br><br>FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);<br><br>FLASH_SetLatency(FLASH_Latency_2);<br><span class="hljs-comment">//-----------------------------------------------------------</span><br><span class="hljs-comment">// AHB config:HCLK = SYSCLK</span><br>RCC_HCLKConfig(RCC_SYSCLK_Div1);<br><span class="hljs-comment">// APB2 config:PCLK2 = HCLK</span><br>RCC_PCLK2Config(RCC_HCLK_Div1);<br><span class="hljs-comment">//APB! config:PCLK1 = HCLK/2</span><br>RCC_PCLK2Config(RCC_HCLK_Div2);<br><br><span class="hljs-comment">// Set PLL clock source and multiple factor</span><br>RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul);<span class="hljs-comment">// PLLCLK = 8MHz * RCC_PLLMul</span><br><br><span class="hljs-comment">// Enable PLL</span><br>RCC_PLLCmd(ENABLE);<br><span class="hljs-keyword">while</span>(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) != SUCCESS)&#123;<br>&#125;<br><br><span class="hljs-comment">// Set PLL clock as system clock</span><br>RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);<br><br><span class="hljs-comment">//Get system clock status, , make sure PLLCLK is the system clock</span><br><span class="hljs-keyword">while</span>(RCC_GetSYSCLKSource() != <span class="hljs-number">0x08</span>)&#123;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// If HSE failure, code runs stuck here.</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>2、使用 HSI 配置系统时钟</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*@briefConfig HSI and set it as system clock</span><br><span class="hljs-comment">*@param pllmul: PLLCLK = 8MHz * RCC_PLLMul, RCC_PLLMul_x, x=2~16</span><br><span class="hljs-comment">*@retvalnone</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">HSI_SetSysClock</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> RCC_PLLMul)</span><br>&#123;<br>__IO <span class="hljs-type">uint32_t</span> HSIStartUpStatus = <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">/* Deinitialize RCC */</span><br>RCC_DeInit();<br><br><span class="hljs-comment">// Enable HSI</span><br>RCC_HSICmd(ENABLE);<br><br><span class="hljs-comment">// Wait HSE Start up</span><br>HSIStartUpStatus = RCC-&gt;CR &amp; RCC_CR_HSIRDY;<br><br><span class="hljs-keyword">if</span>(HSIStartUpStatus == RCC_CR_HSIRDY)<br>&#123;<br><span class="hljs-comment">//-----------------------------------------------------------</span><br><span class="hljs-comment">// Enable flash prefetch buffer</span><br><br>FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);<br><br>FLASH_SetLatency(FLASH_Latency_2);<br><span class="hljs-comment">//-----------------------------------------------------------</span><br><span class="hljs-comment">// AHB config:HCLK = SYSCLK</span><br>RCC_HCLKConfig(RCC_SYSCLK_Div1);<br><span class="hljs-comment">// APB2 config:PCLK2 = HCLK</span><br>RCC_PCLK2Config(RCC_HCLK_Div1);<br><span class="hljs-comment">//APB! config:PCLK1 = HCLK/2</span><br>RCC_PCLK2Config(RCC_HCLK_Div2);<br><br><span class="hljs-comment">// Set PLL clock source and multiple factor</span><br>RCC_PLLConfig(RCC_PLLSource_HSI_Div2, RCC_PLLMul);<span class="hljs-comment">// PLLCK = 4MHz * RCC_PLLMul</span><br><br><span class="hljs-comment">// Enable PLL</span><br>RCC_PLLCmd(ENABLE);<br><span class="hljs-keyword">while</span>(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) != SUCCESS)&#123;<br>&#125;<br><br><span class="hljs-comment">// Set PLL clock as system clock</span><br>RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);<br><br><span class="hljs-comment">//Get system clock status, make sure PLLCLK is the system clock</span><br><span class="hljs-keyword">while</span>(RCC_GetSYSCLKSource() != <span class="hljs-number">0x08</span>)&#123;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">// If HSI failure, code runs stuck here.</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、软件延时</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">delay</span><span class="hljs-params">(__IO <span class="hljs-type">uint32_t</span> nCount)</span><br>&#123;<br><span class="hljs-keyword">for</span>(; nCount!=<span class="hljs-number">0</span>; nCount--);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、MCO 输出</p><p>STM32F103 系列中，PA8 可以利用为 MCO 引脚。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*@brief </span><br><span class="hljs-comment">*@param</span><br><span class="hljs-comment">*@retval</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">MCO_GPIO_Conifg</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>GPIO_InitTypeDefGPIO_InitStructure;<br><span class="hljs-comment">// Enable GPIOA clock</span><br>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);<br><span class="hljs-comment">// Select MCO GPIO pin to PA8</span><br>GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;<br><span class="hljs-comment">// Set MCO GPIO pin mode as alternative fuction push-pull output</span><br>GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;<br><span class="hljs-comment">// Set MCO GPIO pin speed as 50MHz</span><br>GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;<br><span class="hljs-comment">// Initialize GPIPA</span><br>GPIO_Init(GPIOA, &amp;GPIO_InitStructure);<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>MCO 输出时钟选择：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">// Config MCO input clock: HSE, HSI, PLLCLK/2, SYSCLK</span><br><span class="hljs-comment">// Measure MCO signal on PA8</span><br><span class="hljs-comment">//RCC_MCOConfig(RCC_MCO_HSE);</span><br><span class="hljs-comment">//RCC_MCOConfig(RCC_MCO_HSI);</span><br><span class="hljs-comment">//RCC_MCOConfig(RCC_MCO_PLLCLK_Div2);</span><br>RCC_MCOConfig(RCC_MCO_SYSCLK);<br></code></pre></div></td></tr></table></figure><p>5、main 函数：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// System clock  has been set to 72MHz</span><br><br><span class="hljs-comment">/* Re-config system clock, use only HSE or HSI */</span><br><span class="hljs-comment">// Set HSE as system clock: SYSCLK = 8MHz * RCC_PLLMul_x: x=2~16</span><br><span class="hljs-comment">//HSE_SetSysClock(RCC_PLLMul_9);</span><br> <br><span class="hljs-comment">// Set HSI as system clock: SYSCLK = 4MHz * RCC_PLLMul_x: x=2~16</span><br>HSI_SetSysClock(RCC_PLLMul_9);<br><br>LED_GPIO_Config();<br><span class="hljs-comment">// MCO I/O pin config</span><br>MCO_GPIO_Conifg();<br><span class="hljs-comment">// Config MCO input clock: HSE, HSI, PLLCLK/2, SYSCLK</span><br><span class="hljs-comment">// Measure MCO signal on PA8</span><br><span class="hljs-comment">//RCC_MCOConfig(RCC_MCO_HSE);</span><br><span class="hljs-comment">//RCC_MCOConfig(RCC_MCO_HSI);</span><br><span class="hljs-comment">//RCC_MCOConfig(RCC_MCO_PLLCLK_Div2);</span><br>RCC_MCOConfig(RCC_MCO_SYSCLK);<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>LED_G_ON;<br>SOFT_DELAY;<br><br>LED_G_OFF;<br>SOFT_DELAY;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Chapter 12 GPIO 输入－－按键检测</title>
    <link href="/2022/04/06/folder/Chapter_12_GPIO_Input_Key/Chapter-12-%20GPIO-Input-Key-Detect/"/>
    <url>/2022/04/06/folder/Chapter_12_GPIO_Input_Key/Chapter-12-%20GPIO-Input-Key-Detect/</url>
    
    <content type="html"><![CDATA[<h1 id="Chapter-12-GPIO-输入－－按键检测"><a href="#Chapter-12-GPIO-输入－－按键检测" class="headerlink" title="Chapter 12     GPIO 输入－－按键检测"></a>Chapter 12     GPIO 输入－－按键检测</h1><h2 id="硬件设计"><a href="#硬件设计" class="headerlink" title="硬件设计"></a>硬件设计</h2><h2 id="软件设计"><a href="#软件设计" class="headerlink" title="软件设计"></a>软件设计</h2><h3 id="编程要点"><a href="#编程要点" class="headerlink" title="编程要点"></a>编程要点</h3><ul><li>使用 GPIO 端口时钟</li><li>初始化 GPIO 目标引脚为输入模式（浮空输入）</li><li>编写简单测试程序，检测按键的状态：实现按键控制 LED</li></ul><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>1、按键引脚宏定义</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span>__BSP_KEY_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __BSP_KEY_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><br><span class="hljs-comment">/* Define the value of key pressed status*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>KEY_ON0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span>KEY_OFF1</span><br><br><span class="hljs-comment">/* Keys I/O definitions */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY1_GIPO_CLKRCC_APB2Periph_GPIOC</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY1_GPIO_PORTGPIOC</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY1_GPIO_PINGPIO_Pin_13</span><br><br><span class="hljs-comment">/* Keys I/O definitions */</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY2_GIPO_CLKRCC_APB2Periph_GPIOC</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY2_GPIO_PORTGPIOC</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> KEY2_GPIO_PINGPIO_Pin_12</span><br><br><span class="hljs-comment">/* Function declarations */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Key_GPIO_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>;<br><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">Key_Scan</span><span class="hljs-params">(GPIO_TypeDef* GPIOx, <span class="hljs-type">uint16_t</span> GPIO_Pin)</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></div></td></tr></table></figure><p>2、按键 GPIO 初始化函数</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">*@brief Key Initialization function</span><br><span class="hljs-comment">*@paramnone</span><br><span class="hljs-comment">*@retvalnone</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Key_GPIO_Config</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>GPIO_InitTypeDefGPIO_InitStructure;<br><br>RCC_APB2PeriphClockCmd(KEY1_GIPO_CLK|KEY2_GIPO_CLK, ENABLE);<br><br>GPIO_InitStructure.GPIO_Pin= KEY1_GIPO_CLK;<br>GPIO_InitStructure.GPIO_Mode= GPIO_Mode_IN_FLOATING;<br>GPIO_Init(KEY1_GPIO_PORT, &amp;GPIO_InitStructure);<br><br>GPIO_InitStructure.GPIO_Pin= KEY2_GPIO_PIN;<br>GPIO_InitStructure.GPIO_Mode= GPIO_Mode_IN_FLOATING;<br>GPIO_Init(KEY2_GPIO_PORT, &amp;GPIO_InitStructure);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>3、检测按键的状态</p><p>GPIO 引脚的输入电平可能过读取 IDR 寄存器对应的数据位来获取，而，</p><p>STM32 标准库提供了端口位获取状态函数：GPIO_ReadInputDataBit</p><p>开发板按键已提供硬件消除波纹，在 Key_Scan 函数中未做软件滤波。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* @briefCheck if if specifiied key is pressed.</span><br><span class="hljs-comment">*@paramGPIOx: Specified Port, x=(A..G)</span><br><span class="hljs-comment">* @paramGPIO_Pin: Specified Pin, GPIO_Pin_x (x=0~15)</span><br><span class="hljs-comment">*@retvalStatus of key</span><br><span class="hljs-comment">*@argKEY_ON:Key pressed</span><br><span class="hljs-comment">*@argKEY_OFF: Key released</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">uint8_t</span> <span class="hljs-title function_">Key_Scan</span><span class="hljs-params">(GPIO_TypeDef* GPIOx, <span class="hljs-type">uint16_t</span> GPIO_Pin)</span><br>&#123;<br><span class="hljs-comment">/* Check if key pressed */</span><br><span class="hljs-keyword">if</span>(GPIO_ReadInputDataBit(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == KEY_ON)<br>&#123;<br><span class="hljs-keyword">while</span>(GPIO_ReadInputDataBit(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == KEY_ON);<br><span class="hljs-keyword">return</span> KEY_ON;<br>&#125; <span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-keyword">return</span> KEY_OFF;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>4、main 函数</p><p>初始化 LED 和按键后，在 while 函数里不断调用 Key_Scan 函数，并判断其返回值是否为表示按键按下的 LED_ON，若是反转 LED 的状态。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_led.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bsp_key.h&quot;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">*@briefmain function</span><br><span class="hljs-comment">*@paramnone</span><br><span class="hljs-comment">* @retvalnone</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br><span class="hljs-comment">// System clock  has been set to 72MHz</span><br><br>LED_GPIO_Config();<br>Key_GPIO_Config();<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(Key_Scan(KEY1_GPIO_PORT, KEY1_GPIO_PIN) == KEY_ON)<br>&#123;<br>LED_G_TOGGLE;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="下载验证"><a href="#下载验证" class="headerlink" title="下载验证"></a>下载验证</h3><p>编程、下载，复位开发板，按下按键可以控制 LED 亮、灭。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Programming</tag>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/06/hello-world/"/>
    <url>/2022/04/06/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><p>Modify by Shawn</p><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span>  LEＤ_PIN       Pin_0</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
